#+TITLE: Emacs配置文件
#+AUTHOR: xiudi
#+DATE: 2023/04/07 20:43:53
#+STARTUP: overview

* early-init.el
:PROPERTIES:
:HEADER-ARGS: :tangle early-init.el
:END:
+ 在Emacs刚启动，尚未加载主要配置文件时的配置。
#+BEGIN_SRC emacs-lisp
  ;;; early-init.el --- Emacs pre-initialization config -*- lexical-binding: t -*-
  ;;; Commentary:

  ;;; Code:

  ;; 设置垃圾回收参数
  (setq gc-cons-threshold most-positive-fixnum)
  ;;; (setq gc-cons-percentage 0.6)
  ;; 清空避免加载远程文件的时候分析文件
  (setq file-name-handler-alist nil)

  ;; 启动早期不加载`package.el'包管理器
  (setq package-enable-at-startup nil)
  ;; 不从包缓存中加载
  (setq package-quickstart nil)

  ;; 禁止展示菜单栏、工具栏和纵向滚动条
  (push '(menu-bar-lines . 0) default-frame-alist)
  (push '(tool-bar-lines . 0) default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)

  ;; 禁止自动缩放窗口先
  (setq frame-inhibit-implied-resize t)

  ;; 禁止菜单栏、工具栏、滚动条模式，禁止启动屏幕和文件对话框
  (menu-bar-mode -1)                      ; 关闭菜单栏
  (tool-bar-mode -1)                      ; 关闭工具栏
  (scroll-bar-mode -1)                    ; 关闭滚动条
  (setq inhibit-splash-screen t)
  (setq use-file-dialog nil)

  ;; 在这个阶段不编译
  (setq comp-deferred-compilation nil)

  (provide 'early-init)
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;; early-init.el ends here
#+END_SRC

* init.el
:PROPERTIES:
:HEADER-ARGS: :tangle init.el
:END:
** init.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init.el --- The main init entry for Emacs -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC
** package 包管理配置
#+begin_src emacs-lisp
(require 'package)
(setq package-check-signature nil)
(setq package-archives
	  '(("gnu"          . "http://1.15.88.122/gnu/")
	    ("melpa"        . "http://1.15.88.122/melpa/")
        ("melpa-stable" . "http://1.15.88.122/stable-melpa/")
	    ("nongnu"       . "http://1.15.88.122/nongnu/")))
(package-initialize)
#+end_src
** 安装use-package插件
#+BEGIN_SRC emacs-lisp
;; 安装 use-package
(unless (package-installed-p 'use-package)
   (package-refresh-contents)
   (package-install 'use-package))

;; 配置 use-package
(eval-and-compile
  (setq use-package-always-ensure nil)
  (setq use-package-always-defer nil)
  (setq use-package-expand-minimally nil)
  (setq use-package-enable-imenu-support t)
  (if (daemonp)
      (setq use-package-always-demand t)))

(eval-when-compile
  (require 'use-package))

;; 安装 use-package 的集成模块
(use-package use-package-ensure-system-package
  :ensure t)
(use-package diminish
  :ensure t)
(use-package bind-key
  :ensure t)

;; 安装 benchmark-init, 优化Emacs启动速度
(require 'benchmark-init-modes)
(require 'benchmark-init)
(benchmark-init/activate)
;;; To disable collection of benchmark data after init is done.
(add-hook 'after-init-hook 'benchmark-init/deactivate)
#+END_SRC
** 加载各模块化配置
#+BEGIN_SRC emacs-lisp
;; 将lisp目录放在加载路径之前以提高启动速度
(let ((dir (locate-user-emacs-file "lisp")))
  (add-to-list 'load-path (file-name-as-directory dir)))

;; 不要在 *message* 缓冲区显示加载模块化配置的信息
(with-temp-message ""
  (require 'init-ui)
  (require 'init-base)
  (require 'init-dired)
  (require 'init-edit)
  (require 'init-org)
  (require 'init-completion)
  (require 'init-tools)
  (require 'init-dev)
  (require 'init-research)
  (require 'init-eaf)
  (require 'init-ai)
  (require 'init-shell)
  )
#+END_SRC
** init.el 文件尾
#+BEGIN_SRC emacs-lisp
(provide 'init)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init.el ends here
#+END_SRC
* init-ui.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ui.el :mkdirp yes
:END:
** init-ui.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-ui.el --- UI settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC
** doom-themes主题
+ [[https://github.com/doomemacs/themes#manually--use-package][doom-themes]] 是我非常喜欢的一个主题包。
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
   ;; Global settings (defaults)
  (setq doom-themes-enable-bold nil    ; if nil, bold is universally disabled
	doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-peacock t)
  (doom-themes-treemacs-config))
#+END_SRC
** 字体配置
*** cn-fonts
- tumashu 开发的 [[https://github.com/tumashu/cnfonts][cnfonts]] 方便实现中英文字体等宽对齐
#+BEGIN_SRC emacs-lisp
;; (use-package cnfonts
;;   :ensure t
;;   :after all-the-icons
;;   :hook (cnfonts-set-font-finish
;;          . (lambda (fontsizes-list)
;;              (set-fontset-font t 'unicode (font-spec :family "Noto Color Emoji") nil 'append)
;;              (set-fontset-font t 'unicode (font-spec :family "Sarasa Term SC Nerd") nil 'append)
;;              (set-fontset-font t 'unicode (font-spec :family "Noto Emoji") nil 'append)
;;              (set-fontset-font t 'unicode (font-spec :family "all-the-icons") nil 'append)
;;              (set-fontset-font t 'unicode (font-spec :family "file-icons") nil 'append)
;;              (set-fontset-font t 'unicode (font-spec :family "Material Icons") nil 'append)
;;              (set-fontset-font t 'unicode (font-spec :family "github-octicons") nil 'append)
;;              (set-fontset-font t 'unicode (font-spec :family "FontAwesome") nil 'append)
;;              (set-fontset-font t 'unicode (font-spec :family "Weather Icons") nil 'append)))

;;   :custom
;;   (cnfonts-personal-fontnames '(("Fira Mono" "JetBrains Mono" "Ubuntu Mono")
;;                                 ("霞鹜文楷" "微软雅黑")
;;                                 ("Simsun-ExtB" "方正聚珍新仿简繁" "PragmataPro Mono Liga")
;;                                 ("Noto Emoji" "Sarasa Term SC Nerd" "Segoe UI Emoji" "Segoe UI Symbol" "Segoe Print")))
;;   :config
;;   (cnfonts-enable))
#+END_SRC
*** 金色飞贼小米的配置
- 参考链接[[https://emacs-china.org/t/emacs/22193][为emacs正确配置英文、中文、符号字体的正确方式？]]
#+BEGIN_SRC emacs-lisp
;; 默认字体和字号 @ https://fonts.google.com/specimen/Fira+Mono
;;; sudo mv * /usr/share/fonts/TTF
;;; sudo fc-cache -f -v
(set-face-attribute 'default nil :font "Fira Mono" :height 160)
;; 中文默认字体 @ https://mrswolf.github.io/my-manjaro-log/
(set-fontset-font "fontset-default" 'han "Kaiti")
;;;(set-fontset-font t 'han (font-spec :family "霞鹜文楷" :weight 'bold))
;; 数学符号默认字体 @ https://wiki.archlinuxcn.org/zh-hans/%E5%BE%AE%E8%BD%AF%E5%AD%97%E4%BD%93
;; 保证 Unicode 数学符号可以正确显示
(set-fontset-font "fontset-default" 'mathematical "Cambria Math")
;; 汉字间距显示问题
(setq inhibit-compacting-font-caches t)
;; 固定间距字体 @ https://www.jetbrains.com/lp/mono/
(set-face-attribute 'fixed-pitch nil :font "JetBrains Mono"  :height 150)
;; 可变间距字体
(set-face-attribute 'variable-pitch nil :font "Segoe UI Emoji" :height 160 :weight 'regular)
#+END_SRC
** 其他UI零散设置项
#+begin_src emacs-lisp
  ;; 禁用一些GUI特性
  (setq use-dialog-box nil)               ; 鼠标操作不使用对话框
  (setq inhibit-default-init t)           ; 不加载 `default' 库
  (setq inhibit-startup-screen t)         ; 不加载启动画面
  (setq inhibit-startup-message t)        ; 不加载启动消息
  (setq inhibit-startup-buffer-menu t)    ; 不显示缓冲区列表

  ;; 草稿缓冲区默认文字设置
  (setq initial-scratch-message (concat ";; Happy hacking, "
                                        (capitalize user-login-name) " - Emacs ♥ you!\n\n"))

  ;; 设置缓冲区的文字方向为从左到右
  (setq bidi-paragraph-direction 'left-to-right)
  ;; 禁止使用双向括号算法
  ;; (setq bidi-inhibit-bpa t)

  ;; 设置自动折行宽度为80个字符，默认值为70
  (setq-default fill-column 80)

  ;; 设置大文件阈值为100MB，默认10MB
  (setq large-file-warning-threshold 100000000)

  ;; 以16进制显示字节数
  (setq display-raw-bytes-as-hex t)
  ;; 有输入时禁止 `fontification' 相关的函数钩子，能让滚动更顺滑
  (setq redisplay-skip-fontification-on-input t)

  ;; 禁止响铃
  (setq ring-bell-function 'ignore)

  ;; 禁止闪烁光标
  (blink-cursor-mode -1)

  ;; 在光标处而非鼠标所在位置粘贴
  (setq mouse-yank-at-point t)

  ;; 拷贝粘贴设置
  (setq select-enable-primary nil)        ; 选择文字时不拷贝
  (setq select-enable-clipboard t)        ; 拷贝时使用剪贴板

  ;; 鼠标滚动设置
  (setq scroll-step 2)
  (setq scroll-margin 2)
  (setq hscroll-step 2)
  (setq hscroll-margin 2)
  (setq scroll-conservatively 101)
  (setq scroll-up-aggressively 0.01)
  (setq scroll-down-aggressively 0.01)
  (setq scroll-preserve-screen-position 'always)

  ;; 对于高的行禁止自动垂直滚动
  (setq auto-window-vscroll nil)

  ;; 设置新分屏打开的位置的阈值
  (setq split-width-threshold (assoc-default 'width default-frame-alist))
  (setq split-height-threshold nil)

  ;; TAB键设置，在Emacs里不使用TAB键，所有的TAB默认为4个空格
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  ;; yes或no提示设置，通过下面这个函数设置当缓冲区名字匹配到预设的字符串时自动回答yes
  (setq original-y-or-n-p 'y-or-n-p)
  (defalias 'original-y-or-n-p (symbol-function 'y-or-n-p))
  (defun default-yes-sometimes (prompt)
    "automatically say y when buffer name match following string"
    (if (or
         (string-match "has a running process" prompt)
         (string-match "does not exist; create" prompt)
         (string-match "modified; kill anyway" prompt)
         (string-match "Delete buffer using" prompt)
         (string-match "Kill buffer of" prompt)
         (string-match "still connected.  Kill it?" prompt)
         (string-match "Shutdown the client's kernel" prompt)
         (string-match "kill them and exit anyway" prompt)
         (string-match "Revert buffer from file" prompt)
         (string-match "Kill Dired buffer of" prompt)
         (string-match "delete buffer using" prompt)
         (string-match "Kill all pass entry" prompt)
         (string-match "for all cursors" prompt)
         (string-match "Do you want edit the entry" prompt))
        t
      (original-y-or-n-p prompt)))
  (defalias 'yes-or-no-p 'default-yes-sometimes)
  (defalias 'y-or-n-p 'default-yes-sometimes)

  ;; 设置剪贴板历史长度300，默认为60
  (setq kill-ring-max 200)

  ;; 在剪贴板里不存储重复内容
  (setq kill-do-not-save-duplicates t)

  ;; 设置位置记录长度为6，默认为16
  ;; 可以使用 `counsel-mark-ring' or `consult-mark' (C-x j) 来访问光标位置记录
  ;; 使用 C-x C-SPC 执行 `pop-global-mark' 直接跳转到上一个全局位置处
  ;; 使用 C-u C-SPC 跳转到本地位置处
  (setq mark-ring-max 6)
  (setq global-mark-ring-max 6)

  ;; 设置 emacs-lisp 的限制
  (setq max-lisp-eval-depth 10000)        ; 默认值为 800
  (setq max-specpdl-size 10000)           ; 默认值为 1600

  ;; 启用 `list-timers', `list-threads' 这两个命令
  (put 'list-timers 'disabled nil)
  (put 'list-threads 'disabled nil)

  ;; 在命令行里支持鼠标
  (xterm-mouse-mode 1)

  ;; 退出Emacs时进行确认
  (setq confirm-kill-emacs 'y-or-n-p)

  ;; 开启Emacs的视觉换行模式
  (visual-line-mode 1)

  ;; 在模式栏上显示当前光标的列号
  (column-number-mode t)

  ;; 开启行号后便于使用 M-g M-g 跳转到指定行
  (global-display-line-numbers-mode t)
  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook
                  pdf-view-mode-hook
                  eww-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
  ;;; highlight current line
  (global-hl-line-mode t)
#+end_src

** 编码设置
- Windows所使用的编码方式与Manjaro不同，导致中文字体无法正确显示
  - =M-x revert-buffer-with-coding-system RET gbk=
  - =M-x set-buffer-file-coding-system RET utf-8=
- 统一使用UTF-8编码
#+BEGIN_SRC emacs-lisp
;; 配置所有的编码为UTF-8，参考：
;; https://thraxys.wordpress.com/2016/01/13/utf-8-in-emacs-everywhere-forever/
(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-language-environment 'utf-8)
(set-clipboard-coding-system 'utf-8)
(set-file-name-coding-system 'utf-8)
(set-buffer-file-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
(modify-coding-system-alist 'process "*" 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
#+END_SRC
** 模式栏设置
*** doom-modeline插件
+ [[https://github.com/seagle0128/doom-modeline][doom-modeline]] 是一个模式栏美化插件。
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode)
  :custom
  (doom-modeline-irc nil)
  (doom-modeline-mu4e nil)
  (doom-modeline-gnus nil)
  (doom-modeline-github nil)
  (doom-modeline-buffer-file-name-style 'truncate-upto-root) ; : auto
  (doom-modeline-persp-name nil)
  (doom-modeline-unicode-fallback t)
  (doom-modeline-enable-word-count nil))
#+end_src
*** minions插件
+ [[https://github.com/tarsius/minions][minions]] 插件能让模式栏变得清爽，将次要模式隐藏起来。
#+BEGIN_SRC emacs-lisp
(use-package minions
  :ensure t
  :hook (after-init . minions-mode))
#+END_SRC

** keycast按键展示
+ [[https://github.com/tarsius/keycast][keycast mode]] 插件可以在模式栏上展示所有的按键，以及对应的函数。
#+BEGIN_SRC emacs-lisp
(use-package keycast
  :ensure t
  :hook (after-init . keycast-mode)
  ;; :custom-face
  ;; (keycast-key ((t (:background "#0030b4" :weight bold))))
  ;; (keycast-command ((t (:foreground "#0030b4" :weight bold))))
  :config
  ;; set for doom-modeline support
  ;; With the latest change 72d9add, mode-line-keycast needs to be modified to keycast-mode-line.
  (define-minor-mode keycast-mode
    "Show current command and its key binding in the mode line (fix for use with doom-mode-line)."
    :global t
    (if keycast-mode
        (progn
          (add-hook 'pre-command-hook 'keycast--update t)
          (add-to-list 'global-mode-string '("" keycast-mode-line "  ")))
      (remove-hook 'pre-command-hook 'keycast--update)
      (setq global-mode-string (delete '("" keycast-mode-line "  ") global-mode-string))
      ))

  (dolist (input '(self-insert-command
                   org-self-insert-command))
    (add-to-list 'keycast-substitute-alist `(,input "." "Typing…")))

  (dolist (event '(mouse-event-p
                   mouse-movement-p
                   mwheel-scroll))
    (add-to-list 'keycast-substitute-alist `(,event nil)))

  (setq keycast-log-format "%-20K%C\n")
  (setq keycast-log-frame-alist
        '((minibuffer . nil)))
  (setq keycast-log-newest-first t)
  )
#+END_SRC
** dashboard 设置
#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :config
  (setq dashboard-banner-logo-title "Welcom to Emacs")
  ;;(setq dashboard-projects-backend 'projectile)
  (setq dashboard-startup-banner 'official)
  (setq dashboard-items '((recents . 5)
			  (bookmarks . 5)
			  (projects . 10)))
  (dashboard-setup-startup-hook))
#+END_SRC
** shackle 窗口行为控制
+ 通过 [[https://depp.brause.cc/shackle/][shackle]] 插件自定义窗口的弹出行为，包括方向、大小、弹出方式等
#+BEGIN_QUOTE
其中，最重要的就是 shackle-rules 这个变量的配置，这个变量的配置主要有下面几个方面：

CONDITION
    条件，即这一条规则适用于满足什么样的条件才生效。这个条件可以是正则表达式，可以是字符串，可以是模式，如上面的例子， *eshell* 就是匹配到缓冲区名字是 *eshell* 时生效。
:select
    控制弹出 window 后是否选中
:inhibit-window-quit
    按“q”退出时，不删除这个缓冲区
:size
    0-1之间的数，控制 window 的百分比宽度或高度，如0.5就是指一半的宽度或高度
:align
    弹出的 window 往哪里看齐，可以取值为 t, ’left, ‘right, ‘below, ‘above
:other
    如果当前 frame 有多个 window，是否复用另外一个 window
:popup
    弹出一个新的 window，而不是复用当前 window
:same
    不弹出 window，复用当前 window
:ignore
    禁止显示该窗口
#+END_QUOTE
#+BEGIN_SRC emacs-lisp
(use-package shackle
  :ensure t
  :hook (after-init . shackle-mode)
  :init
  (setq shackle-lighter "")
  (setq shackle-select-reused-windows nil) ; default nil
  (setq shackle-default-alignment 'below)  ; default below
  (setq shackle-rules
        ;; CONDITION(:regexp)            :select     :inhibit-window-quit   :size+:align|:other     :same|:popup
        '((compilation-mode              :ignore t)
          ("\\*Async Shell.*\\*" :regexp t :ignore t)
          ("\\*corfu.*\\*"       :regexp t :ignore t)
          ("*eshell*"                    :select t                          :size 0.4  :align t     :popup t)
          (helpful-mode                  :select t                          :size 0.6  :align right :popup t)
          ("*Messages*"                  :select t                          :size 0.4  :align t     :popup t)
          ("*Calendar*"                  :select t                          :size 0.3  :align t     :popup t)
          ("*info*"                      :select t                                                  :same t)
          (magit-status-mode             :select t   :inhibit-window-quit t                         :same t)
          (magit-log-mode                :select t   :inhibit-window-quit t                         :same t)
          ))
  )
#+END_SRC
** popper 窗口弹出行为管理
+ [[https://github.com/karthink/popper][popper]] 可以控制窗口的弹出行为，与 [[https://depp.brause.cc/shackle/][shackle]] 一起配合使用
+ 左下角显示了 =POP= 的字样，我们按下 =M-`= 可以一键关闭/打开这个窗口
#+BEGIN_SRC emacs-lisp
(use-package popper
  :ensure t
  :bind (("M-`"     . popper-toggle-latest)
         ("M-<tab>" . popper-cycle)
         ("M-\\"    . popper-toggle-type)
         )
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "\\*Async Shell Command\\*"
          help-mode
          helpful-mode
          occur-mode
          pass-view-mode
          "^\\*eshell.*\\*$" eshell-mode ;; eshell as a popup
          "^\\*shell.*\\*$"  shell-mode  ;; shell as a popup
          ("\\*corfu\\*" . hide)
          (compilation-mode . hide)
          ;; derived from `fundamental-mode' and fewer than 10 lines will be considered a popup
          (lambda (buf) (with-current-buffer buf
                          (and (derived-mode-p 'fundamental-mode)
                               (< (count-lines (point-min) (point-max))
                                  10))))
          )
        )
  (popper-mode +1)
  (popper-echo-mode +1)
  :config
  ;; group by project.el, projectile, directory or perspective
  (setq popper-group-function nil)

  ;; pop in child frame or not
  (setq popper-display-function #'display-buffer-in-child-frame)

  ;; use `shackle.el' to control popup
  (setq popper-display-control nil)
  )
#+END_SRC
** winner 窗口布局恢复
+ 通过 winner-undo 和 winner-redo 命令恢复或重做当前的窗口布局。
+ 通过 =C-x 1= 最大化某个窗口后，使用 =winner-undo= 恢复布局
#+BEGIN_SRC emacs-lisp
(use-package winner
  :ensure nil
  :hook (after-init . winner-mode)
  :commands (winner-undo winner-redo)
  :config
  (setq winner-boring-buffers
        '("*Completions*"
          "*Compile-Log*"
          "*inferior-lisp*"
          "*Fuzzy Completions*"
          "*Apropos*"
          "*Help*"
          "*cvs*"
          "*Buffer List*"
          "*Ibuffer*"
          "*esh command on file*"))
  )
#+END_SRC
** init-ui.el 文件尾
#+BEGIN_SRC emacs-lisp

(provide 'init-ui)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-ui.el ends here
#+END_SRC

* init-base.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-base.el :mkdirp yes
:END:
** init-base.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-base.el --- Basical settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC
** 关闭警告
#+BEGIN_SRC emacs-lisp
(setq warning-minimum-level :error)
#+END_SRC
** no-littering让配置目录变简洁
#+BEGIN_SRC emacs-lisp
(use-package no-littering
  :ensure t)
#+END_SRC
** savehist记住mini-buffer历史
#+BEGIN_SRC emacs-lisp
(use-package savehist
  :ensure nil
  :hook (after-init . savehist-mode)
  :config
  ;; Allow commands in minibuffers, will affect `dired-do-dired-do-find-regexp-and-replace' command:
  (setq enable-recursive-minibuffers t)
  (setq history-length 1000)
  (setq savehist-additional-variables '(mark-ring
                                        global-mark-ring
                                        search-ring
                                        regexp-search-ring
                                        extended-command-history))
  (setq savehist-autosave-interval 300))
#+END_SRC
** saveplace记住每个文件的光标位置
+ 自动记住每个文件最后一次访问的光标位置
#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :ensure nil
  :hook (after-init . save-place-mode))
#+END_SRC
** recentf记住最近打开的文件历史
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :ensure nil
  :defines no-littering-etc-directory no-littering-var-directory
  :hook (after-init . recentf-mode)
  :custom
  (recentf-max-saved-items 300)
  (recentf-auto-cleanup 'never)
  ;; `recentf-add-file' will apply handlers first, then call `string-prefix-p'
  ;; to check if it can be pushed to recentf list.
  (recentf-filename-handlers '(abbreviate-file-name))
  (recentf-exclude `(,@(cl-loop for f in `(,package-user-dir
                                           ,no-littering-var-directory
                                           ,no-littering-etc-directory)
                                collect (abbreviate-file-name f))
                     ;; Folders on MacOS start
                     "^/private/tmp/"
                     "^/var/folders/"
                     ;; Folders on MacOS end
                     ".cache"
                     ".cask"
                     ".elfeed"
                     "elfeed"
                     "bookmarks"
                     "cache"
                     "ido.*"
                     "persp-confs"
                     "recentf"
                     "undo-tree-hist"
                     "url"
                     "^/tmp/"
                     "/ssh\\(x\\)?:"
                     "/su\\(do\\)?:"
                     "^/usr/include/"
                     "/TAGS\\'"
                     "COMMIT_EDITMSG\\'")))
#+END_SRC
** undo-tree
- 撤销设置
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :ensure t
  :hook (after-init . global-undo-tree-mode)
  :config
  ;; don't save undo history to local files
  (setq undo-tree-auto-save-history nil)
  )
#+END_SRC
** auto-save自动保存
+ [[https://github.com/manateelazycat/auto-save][auto-save]] 是 [[https://manateelazycat.github.io/][manateeLazyCat]] 开发的自动保存插件
#+BEGIN_SRC emacs-lisp
;; auto-save @
(add-to-list 'load-path "~/.emacs.d/site-lisp/auto-save/")
(require 'auto-save)
(auto-save-enable)
; quick save
(setq auto-save-silent t)
; automatically delete spaces at the end of the line when saving
;; (setq auto-save-delete-trailing-whitespace t)
#+END_SRC
** crux系统增强
+ [[https://github.com/bbatsov/crux][crux]] 提供一系列的增强，如移动增强、删除增强等。
#+BEGIN_SRC emacs-lisp
;; crux
(use-package crux
  :ensure t
  :bind (("C-a" . crux-move-beginning-of-line)
         ("C-x 4 t" . crux-transpose-windows)
         ("C-x K" . crux-kill-other-buffers)
         ("C-k" . crux-smart-kill-line)
         ("C-c r" . crux-rename-file-and-buffer)
         ("C-x DEL" . crux-kill-line-backwards))
  :config
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-point-to-eol kill-ring-save)
  (defalias 'rename-file-and-buffer #'crux-rename-file-and-buffer))
#+END_SRC
** ivy增强
+ 参考 [[https://zhuanlan.zhihu.com/p/441612281][专业Emacs入门（五）：插件篇——功能优化类]]
#+BEGIN_SRC emacs-lisp
(use-package counsel
  :ensure t)

(use-package ivy
  :ensure t
  :init
  (ivy-mode 1)
  (counsel-mode 1)
  :config
  (setq ivy-use-virtual-buffers t)
  (setq search-default-mode #'char-fold-to-regexp)
  (setq ivy-count-format "(%d/%d) ")
  :bind
  (("C-s" . 'swiper)
   ("C-x b" . 'ivy-switch-buffer)
   ("C-c v" . 'ivy-push-view)
   ("C-c s" . 'ivy-switch-view)
   ("C-c V" . 'ivy-pop-view)
   ("C-x C-@" . 'counsel-mark-ring)
   ("C-x C-SPC" . 'counsel-mark-ring)
   :map minibuffer-local-map
   ("C-r" . counsel-minibuffer-history)))
#+END_SRC
** ace-window多窗口切换
#+BEGIN_SRC emacs-lisp
;; ace-window
(use-package ace-window
  :ensure t
  :bind (("C-x o" . 'ace-window)))
#+END_SRC
** init-base.el 文件尾
#+BEGIN_SRC emacs-lisp
(provide 'init-base)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-base.el ends here
#+END_SRC
* init-dired.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-dired.el :mkdirp yes
:END:
** init-dired.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-dired.el --- Dired settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC
** dired 基础配置
#+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :bind (:map dired-mode-map
              ("C-<return>" . xah-open-in-external-app)
              ("W" . dired-copy-path)
              )
  :config
  ;; Enable the disabled dired commands
  (put 'dired-find-alternate-file 'disabled nil)

  ;; open files via external program based on file types, See:
  ;; https://emacs.stackexchange.com/questions/3105/how-to-use-an-external-program-as-the-default-way-to-open-pdfs-from-emacs
  (defun xdg-open (filename)
    (interactive "fFilename: ")
    (let ((process-connection-type))
      (start-process "" nil (cond ((eq system-type 'gnu/linux) "xdg-open")
                                  ((eq system-type 'darwin) "open")
                                  ((eq system-type 'windows-nt) "start")
                                  (t "")) (expand-file-name filename))))
  ;; open files via external program when using find-file
  (defun find-file-auto (orig-fun &rest args)
    (let ((filename (car args)))
      (if (cl-find-if
           (lambda (regexp) (string-match regexp filename))
           '(
             ;; "\\.html?\\'"
             "\\.xlsx?\\'"
             "\\.pptx?\\'"
             "\\.docx?\\'"
             "\\.mp4\\'"
             "\\.app\\'"
             ))
          (xdg-open filename)
        (apply orig-fun args))))
  (advice-add 'find-file :around 'find-file-auto)

  (defun dired-copy-path ()
    "In dired, copy file path to kill-buffer.
At 2nd time it copy current directory to kill-buffer."
    (interactive)
    (let (path)
      (setq path (dired-file-name-at-point))
      (if (string= path (current-kill 0 1)) (setq path (dired-current-directory)))
      (message path)
      (kill-new path)))

  (defun xah-open-in-external-app (&optional @fname)
    "Open the current file or dired marked files in external app.
The app is chosen from your OS's preference.

When called in emacs lisp, if @fname is given, open that.

URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
Version 2019-11-04"
    (interactive)
    (let* (
           ($file-list
            (if @fname
                (progn (list @fname))
              (if (or (string-equal major-mode "dired-mode")
                      (string-equal major-mode "dirvish-mode"))
                  (dired-get-marked-files)
                (list (buffer-file-name)))))
           ($do-it-p (if (<= (length $file-list) 5)
                         t
                       (y-or-n-p "Open more than 5 files? "))))
      (when $do-it-p
        (cond
         ((string-equal system-type "windows-nt")
          (mapc
           (lambda ($fpath)
             (w32-shell-execute "open" $fpath)) $file-list))
         ((string-equal system-type "darwin")
          (mapc
           (lambda ($fpath)
             (shell-command
              (concat "open " (shell-quote-argument $fpath))))  $file-list))
         ((string-equal system-type "gnu/linux")
          (mapc
           (lambda ($fpath) (let ((process-connection-type nil))
                              (start-process "" nil "xdg-open" $fpath))) $file-list))))))
  :custom
  ;; (dired-recursive-deletes 'always)
  (delete-by-moving-to-trash t)
  (dired-dwim-target t)
  (dired-bind-vm nil)
  (dired-bind-man nil)
  (dired-bind-info nil)
  (dired-auto-revert-buffer t)
  (dired-hide-details-hide-symlink-targets nil)
  (dired-kill-when-opening-new-dired-buffer t)
  (dired-listing-switches "-AFhlv"))

(use-package dired-aux
  :ensure nil
  :bind (:map dired-mode-map
              ("C-c +" . dired-create-empty-file))
  :config
  ;; with the help of `evil-collection', P is bound to `dired-do-print'.
  (define-advice dired-do-print (:override (&optional _))
    "Show/hide dotfiles."
    (interactive)
    (if (or (not (boundp 'dired-dotfiles-show-p)) dired-dotfiles-show-p)
        (progn
          (setq-local dired-dotfiles-show-p nil)
          (dired-mark-files-regexp "^\\.")
          (dired-do-kill-lines))
      (revert-buffer)
      (setq-local dired-dotfiles-show-p t)))
  :custom
  (dired-isearch-filenames 'dwim)
  (dired-create-destination-dirs 'ask)
  (dired-vc-rename-file t))

(use-package dired-x
  :ensure nil
  :hook (dired-mode . dired-omit-mode)
  :init
  (setq dired-guess-shell-alist-user `((,(rx "."
                                             (or
                                              ;; Videos
                                              "mp4" "avi" "mkv" "flv" "ogv" "ogg" "mov"
                                              ;; Music
                                              "wav" "mp3" "flac"
                                              ;; Images
                                              "jpg" "jpeg" "png" "gif" "xpm" "svg" "bmp"
                                              ;; Docs
                                              "pdf" "md" "djvu" "ps" "eps" "doc" "docx" "xls" "xlsx" "ppt" "pptx")
                                             string-end)
                                        ,(cond ((eq system-type 'gnu/linux) "xdg-open")
                                               ((eq system-type 'darwin) "open")
                                               ((eq system-type 'windows-nt) "start")
                                               (t "")))))
  :custom
  (dired-omit-verbose nil)
  (dired-omit-files (rx string-start
                        (or ".DS_Store"
                            ".cache"
                            ".vscode"
                            ".ccls-cache" ".clangd")
                        string-end))
  ;; Dont prompt about killing buffer visiting delete file
  (dired-clean-confirm-killing-deleted-buffers nil)
  )
#+END_SRC
** diredfl 多彩美化
+ 默认的 Dired 只有两种颜色以区分文件和文件夹，使用 [[https://github.com/purcell/diredfl][diredfl]] 插件让Dired变得多彩
#+BEGIN_SRC emacs-lisp
(use-package diredfl
  :ensure t
  :hook (dired-mode . diredfl-mode))
#+END_SRC
** all-the-icons-dired 图标美化
+ 使用 [[https://github.com/jtbm37/all-the-icons-dired][all-the-icons-dired]] 插件为Dired添加好看的图标
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-dired
  :ensure t
  :hook (dired-mode . all-the-icons-dired-mode)
  )
#+END_SRC
** init-dired.el 文件尾
#+BEGIN_SRC emacs-lisp
(provide 'init-dired)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-dired.el ends here
#+END_SRC
* init-edit.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-edit.el :mkdirp yes
:END:
** init-edit.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-edit.el --- Editing settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC
** Emacs备份设置
+ 不使用Emacs的自动备份设置。
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)                                  ; 不自动备份
(setq auto-save-default nil)                                  ; 不使用Emacs自带的自动保存
#+END_SRC
** 解除一些不常用的快捷键
+ 将一些不常用的快捷键解除，防止误操作。
#+BEGIN_SRC emacs-lisp
;; 解除不常用的快捷键定义
(global-set-key (kbd "C-z") nil)
(global-set-key (kbd "s-q") nil)
(global-set-key (kbd "M-z") nil)
(global-set-key (kbd "M-m") nil)
(global-set-key (kbd "C-x C-z") nil)
(global-set-key [mouse-2] nil)
#+END_SRC
** delsel选择文本输入时直接替换
+ Emacs默认选择文本后直接输入，是不会直接删除所选择的文本进行替换的。通过内置的 delsel 插件来实现这个行为。
#+BEGIN_SRC emacs-lisp
;; Directly modify when selecting text
(use-package delsel
  :ensure nil
  :hook (after-init . delete-selection-mode))
#+END_SRC
** 对Org文件进行自动tangle
** init-edit.el 文件尾
#+BEGIN_SRC emacs-lisp
;; (message "init-base configuration: %.2fs"
;;          (float-time (time-subtract (current-time) my/init-base-start-time)))

(provide 'init-edit)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-edit.el ends here
#+END_SRC
* init-org.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-org.el :mkdirp yes
:END:
** init-org.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-org.el --- Org mode settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC
** Org mode 基本配置
#+BEGIN_SRC emacs-lisp
  ;; org
  (use-package org
    :defer t ;; 延迟加载
    :ensure nil
    :mode ("\\.org\\'" . org-mode)
    :hook ((org-mode . visual-line-mode)
           (org-mode . my/org-prettify-symbols))
    :commands (org-find-exact-headline-in-buffer org-set-tags)
    :custom-face
    ;; 设置Org mode标题以及每级标题行的大小
    (org-document-title ((t (:height 1.75 :weight bold))))
    (org-level-1 ((t (:height 1.2 :weight bold))))
    (org-level-2 ((t (:height 1.15 :weight bold))))
    (org-level-3 ((t (:height 1.1 :weight bold))))
    (org-level-4 ((t (:height 1.05 :weight bold))))
    (org-level-5 ((t (:height 1.0 :weight bold))))
    (org-level-6 ((t (:height 1.0 :weight bold))))
    (org-level-7 ((t (:height 1.0 :weight bold))))
    (org-level-8 ((t (:height 1.0 :weight bold))))
    (org-level-9 ((t (:height 1.0 :weight bold))))
    ;; 设置代码块用上下边线包裹
    (org-block-begin-line ((t (:underline t :background unspecified))))
    (org-block-end-line ((t (:overline t :underline nil :background unspecified))))
    :config
    ;; 打开 cdlatex
    (add-hook 'org-mode-hook #'org-cdlatex-mode)
    (add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
    ;; ================================
    ;; 在org mode里美化字符串
    ;; https://symbl.cc/cn/
    ;; ================================
    (defun my/org-prettify-symbols ()
      (setq prettify-symbols-alist
            (mapcan (lambda (x) (list x (cons (upcase (car x)) (cdr x))))
                    '(
                      ("[ ]"              . 9744)         ; ☐
                      ("[X]"              . 9745)         ; ☑
                      ("[-]"              . 8863)         ; ⊟
                      ("#+begin_src"      . 9998)         ; ✎
                      ("#+end_src"        . 9633)         ; □
                      ("#+begin_example"  . 20363)        ; 例
                      ("#+end_example"    . 20363)        ; 例
                      ("#+results:"       . 9776)         ; ☰
                      ("#+attr_latex:"    . 127259)       ; 🄛
                      ("#+attr_html:"     . 127255)       ; 🄗
                      ("#+attr_org:"      . 127262)       ; 🄞
                      ("#+name:"          . 127261)       ; 🄝
                      ("#+caption:"       . 127250)       ; 🄒
					  ("#+date:"          . 128197)       ; 📅
					  ("#+author:"        . 128214)       ; 📖
					  ("#+setupfile:"     . 128221)       ; 📝
					  ("#+email:"         . 128231)       ; 📧
                      ("#+startup:"       . 10034)        ; ✲
                      ("#+options:"       . 9881)         ; ⚙
                      ("#+title:"         . 39064)        ; 题
                      ("#+subtitle:"      . 21103)        ; 副
                      ("#+downloaded:"    . 8650)         ; ⇊
                      ("#+language:"      . 25991)        ; 文
                      ("#+begin_quote"    . 187)          ; »
                      ("#+end_quote"      . 171)          ; «
                      ("#+begin_results"  . 8943)         ; ⋯
                      ("#+end_results"    . 8943)         ; ⋯
                      )))
      (setq prettify-symbols-unprettify-at-point t)
      (prettify-symbols-mode 1))

    ;; 提升latex预览的图片清晰度
    (plist-put org-format-latex-options :scale 1.8)

    ;; 设置标题行之间总是有空格；列表之间根据情况自动加空格
    (setq org-blank-before-new-entry '((heading . t)
                                       (plain-list-item . auto)
                                       ))

    ;; ======================================
    ;; 设置打开Org links的程序
    ;; ======================================
    (defun my-func/open-and-play-gif-image (file &optional link)
      "Open and play GIF image `FILE' in Emacs buffer.

  Optional for Org-mode file: `LINK'."
      (let ((gif-image (create-image file))
            (tmp-buf (get-buffer-create "*Org-mode GIF image animation*")))
        (switch-to-buffer tmp-buf)
        (erase-buffer)
        (insert-image gif-image)
        (image-animate gif-image nil t)
        (local-set-key (kbd "q") 'bury-buffer)
        ))
    (setq org-file-apps '(("\\.png\\'"     . default)
                          (auto-mode       . emacs)
                          (directory       . emacs)
                          ("\\.mm\\'"      . default)
                          ("\\.x?html?\\'" . default)
                          ("\\.pdf\\'"     . emacs)
                          ("\\.md\\'"      . emacs)
                          ("\\.gif\\'"     . my-func/open-and-play-gif-image)
                          ("\\.xlsx\\'"    . default)
                          ("\\.svg\\'"     . default)
                          ("\\.pptx\\'"    . default)
                          ("\\.docx\\'"    . default)))

    :custom
    ;; 设置Org mode的目录
    (org-directory "~/org")
    ;; 设置笔记的默认存储位置
    (org-default-notes-file (expand-file-name "capture.org" org-directory))
    ;; 启用一些子模块
    (org-modules '(ol-bibtex ol-gnus ol-info ol-eww org-habit org-protocol))
    ;; 在按M-RET时，是否根据光标所在的位置分行，这里设置为是
    ;; (org-M-RET-may-split-line '((default . nil)))
    ;; 一些Org mode自带的美化设置
    ;; 标题行美化
    (org-fontify-whole-heading-line t)
    ;; 设置标题行折叠符号
    (org-ellipsis " ▾")
    ;; 在活动区域内的所有标题栏执行某些命令
    (org-loop-over-headlines-in-active-region t)
    ;; TODO标签美化
    (org-fontify-todo-headline t)
    ;; DONE标签美化
    (org-fontify-done-headline t)
    ;; 引用块美化
    (org-fontify-quote-and-verse-blocks t)
    ;; 隐藏宏标记
    (org-hide-macro-markers t)
    ;; 隐藏强调标签, 如=,~,*,_等, 与org-appear配合
    (org-hide-emphasis-markers t)
    ;; 以UTF-8显示，LaTeX 代码的 prettify
    (org-pretty-entities t)
    ;; 高亮 LaTeX 语法
    (org-highlight-latex-and-related '(native latex script entities))
    ;; 不隐藏 LaTeX 的上下标，便于理解
    (org-pretty-entities-include-sub-superscripts nil)
    ;; 增大公式预览的图片大小
    (org-format-latex-options '(:foreground default :background default :scale 1.8 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers ("begin" "$1" "$$" "\\(" "\\[")))
    ;; 是否隐藏标题栏的前置星号，这里我们通过org-modern来隐藏
    ;; (org-hide-leading-stars t)
    ;; 当启用缩进模式时自动隐藏前置星号
    (org-indent-mode-turns-on-hiding-stars t)
    ;; 自动启用缩进
    (org-startup-indented nil)
    ;; 根据标题栏自动缩进文本
    (org-adapt-indentation nil)
    ;; 自动显示图片
    (org-startup-with-inline-images t)
    ;; 默认以Overview的模式展示标题行
    (org-startup-folded 'overview)
    ;; 允许字母列表
    (org-list-allow-alphabetical t)
    ;; 列表的下一级设置
    (org-list-demote-modify-bullet '(
                                     ("-"  . "+")
                                     ("+"  . "1.")
                                     ("1." . "a.")
                                     ))
    ;; 编辑时检查是否在折叠的不可见区域
    (org-fold-catch-invisible-edits 'smart)
    ;; 在当前位置插入新标题行还是在当前标题行后插入，这里设置为当前位置
    (org-insert-heading-respect-content nil)
    ;; 设置图片的最大宽度，如果有imagemagick支持将会改变图片实际宽度
    ;; 四种设置方法：(1080), 1080, t, nil
    (org-image-actual-width nil)
    ;; imenu的最大深度，默认为2
    (org-imenu-depth 4)
    ;; 回车要不要触发链接，这里设置不触发
    (org-return-follows-link nil)
    ;; 上标^下标_是否需要特殊字符包裹，这里设置需要用大括号包裹
    (org-use-sub-superscripts '{})
    ;; 复制粘贴标题行的时候删除id
    (org-clone-delete-id t)
    ;; 粘贴时调整标题行的级别
    (org-yank-adjusted-subtrees t)

    ;; TOOD的关键词设置，可以设置不同的组
    (org-todo-keywords '((sequence "TODO(t)" "HOLD(h!)" "WIP(i!)" "WAIT(w!)" "|" "DONE(d!)" "CANCELLED(c@/!)")
                         (sequence "REPORT(r)" "BUG(b)" "KNOWNCAUSE(k)" "|" "FIXED(f!)")))
    ;; TODO关键词的样式设置
    (org-todo-keyword-faces '(("TODO"       :foreground "#7c7c75" :weight bold)
                              ("HOLD"       :foreground "#feb24c" :weight bold)
                              ("WIP"        :foreground "#0098dd" :weight bold)
                              ("WAIT"       :foreground "#9f7efe" :weight bold)
                              ("DONE"       :foreground "#50a14f" :weight bold)
                              ("CANCELLED"  :foreground "#ff6480" :weight bold)
                              ("REPORT"     :foreground "magenta" :weight bold)
                              ("BUG"        :foreground "red"     :weight bold)
                              ("KNOWNCAUSE" :foreground "yellow"  :weight bold)
                              ("FIXED"      :foreground "green"   :weight bold)))
    ;; 当标题行状态变化时标签同步发生的变化
    ;; Moving a task to CANCELLED adds a CANCELLED tag
    ;; Moving a task to WAIT adds a WAIT tag
    ;; Moving a task to HOLD adds WAIT and HOLD tags
    ;; Moving a task to a done state removes WAIT and HOLD tags
    ;; Moving a task to TODO removes WAIT, CANCELLED, and HOLD tags
    ;; Moving a task to DONE removes WAIT, CANCELLED, and HOLD tags
    (org-todo-state-tags-triggers
     (quote (("CANCELLED" ("CANCELLED" . t))
             ("WAIT" ("WAIT" . t))
             ("HOLD" ("WAIT") ("HOLD" . t))
             (done ("WAIT") ("HOLD"))
             ("TODO" ("WAIT") ("CANCELLED") ("HOLD"))
             ("DONE" ("WAIT") ("CANCELLED") ("HOLD")))))
    ;; 使用专家模式选择标题栏状态
    (org-use-fast-todo-selection 'expert)
    ;; 父子标题栏状态有依赖
    (org-enforce-todo-dependencies t)
    ;; 标题栏和任务复选框有依赖
    (org-enforce-todo-checkbox-dependencies t)
    ;; 优先级样式设置
    (org-priority-faces '((?A :foreground "red")
                          (?B :foreground "orange")
                          (?C :foreground "yellow")))
    ;; 标题行全局属性设置
    (org-global-properties '(("EFFORT_ALL" . "0:15 0:30 0:45 1:00 2:00 3:00 4:00 5:00 6:00 7:00 8:00")
                             ("APPT_WARNTIME_ALL" . "0 5 10 15 20 25 30 45 60")
                             ("RISK_ALL" . "Low Medium High")
                             ("STYLE_ALL" . "habit")))
    ;; Org columns的默认格式
    (org-columns-default-format "%25ITEM %TODO %SCHEDULED %DEADLINE %3PRIORITY %TAGS %CLOCKSUM %EFFORT{:}")
    ;; 当状态从DONE改成其他状态时，移除 CLOSED: [timestamp]
    (org-closed-keep-when-no-todo t)
    ;; DONE时加上时间戳
    (org-log-done 'time)
    ;; 重复执行时加上时间戳
    (org-log-repeat 'time)
    ;; Deadline修改时加上一条记录
    (org-log-redeadline 'note)
    ;; Schedule修改时加上一条记录
    (org-log-reschedule 'note)
    ;; 以抽屉的方式记录
    (org-log-into-drawer t)
    ;; 紧接着标题行或者计划/截止时间戳后加上记录抽屉
    (org-log-state-notes-insert-after-drawers nil)

    ;; refile使用缓存
    (org-refile-use-cache t)
    ;; refile的目的地，这里设置的是agenda文件的所有标题
    (org-refile-targets '((org-agenda-files . (:maxlevel . 9))))
    ;; 将文件名加入到路径
    (org-refile-use-outline-path 'file)
    ;; 是否按步骤refile
    (org-outline-path-complete-in-steps nil)
    ;; 允许创建新的标题行，但需要确认
    (org-refile-allow-creating-parent-nodes 'confirm)

    ;; 设置标签的默认位置，默认是第77列右对齐
    ;; (org-tags-column -77)
    ;; 自动对齐标签
    (org-auto-align-tags t)
    ;; 标签不继承
    (org-use-tag-inheritance nil)
    ;; 在日程视图的标签不继承
    (org-agenda-use-tag-inheritance nil)
    ;; 标签快速选择
    (org-use-fast-tag-selection t)
    ;; 标签选择不需要回车确认
    (org-fast-tag-selection-single-key t)
    ;; 定义了有序属性的标题行也加上 OREDERD 标签
    (org-track-ordered-property-with-tag t)
    ;; 始终存在的的标签
    (org-tag-persistent-alist '(("read"     . ?r)
                                ("mail"     . ?m)
                                ("emacs"    . ?e)
                                ("study"    . ?s)
                                ("work"     . ?w)))
    ;; 预定义好的标签
    (org-tag-alist '((:startgroup)
                     ("crypt"    . ?c)
                     ("linux"    . ?l)
                     ("apple"    . ?a)
                     ("noexport" . ?n)
                     ("ignore"   . ?i)
                     ("TOC"      . ?t)
                     (:endgroup)))

    ;; 归档设置
    (org-archive-location "%s_archive::datetree/")
    )

  ;; Org mode的附加包，有诸多附加功能
  (use-package org-contrib
    :ensure t)
#+END_SRC
** Org mode 美化
+ 通过 [[https://github.com/minad/org-modern][org-modern]] 插件对Org mode进行进一步的美化。
#+BEGIN_SRC emacs-lisp
;; org-modern
(use-package org-modern
  :ensure t
  :hook (after-init . (lambda ()
                        (setq org-modern-hide-stars 'leading)
                        (global-org-modern-mode t)))
  :config
  ;; 标题行型号字符
  (setq org-modern-star ["◉" "○" "✸" "✳" "◈" "◇" "✿" "❀" "✜"])
  ;; 额外的行间距，0.1表示10%，1表示1px
  (setq-default line-spacing 0.1)
  ;; tag边框宽度，还可以设置为 `auto' 即自动计算
  (setq org-modern-label-border 1)
  ;; 设置表格竖线宽度，默认为3
  (setq org-modern-table-vertical 2)
  ;; 设置表格横线为0，默认为0.1
  (setq org-modern-table-horizontal 0)
  ;; 复选框美化
  (setq org-modern-checkbox
        '((?X . #("▢✓" 0 2 (composition ((2)))))
          (?- . #("▢–" 0 2 (composition ((2)))))
          (?\s . #("▢" 0 1 (composition ((1)))))))
  ;; 列表符号美化
  (setq org-modern-list
        '((?- . "•")
          (?+ . "◦")
          (?* . "▹")))
  ;; 代码块左边加上一条竖边线（需要Org mode顶头，如果启用了 `visual-fill-column-mode' 会很难看）
  (setq org-modern-block-fringe t)
  ;; 代码块类型美化，我们使用了 `prettify-symbols-mode'
  (setq org-modern-block-name nil)
  ;; #+关键字美化，我们使用了 `prettify-symbols-mode'
  (setq org-modern-keyword nil)
  )
#+END_SRC
** org-appear 自动展开强调链接
+ 借助[[https://github.com/awth13/org-appear][org-appear]]插件，当光标移动到Org mode里的强调、链接上时，会自动展开，便于编辑。
#+BEGIN_SRC emacs-lisp
;; org-appear
(use-package org-appear
  :ensure t
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autolinks t)
  (setq org-appear-autosubmarkers t)
  (setq org-appear-autoentities t)
  (setq org-appear-autokeywords t)
  (setq org-appear-inside-latex t)
  )
#+END_SRC
** org-auto-tangle 自动tangle设置
+ [[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]] 插件可以在Org mode下自动进行tangle。
#+BEGIN_SRC emacs-lisp
(use-package org-auto-tangle
  :ensure t
  :hook (org-mode . org-auto-tangle-mode)
  :config
  (setq org-auto-tangle-default t)
  )
#+END_SRC
** org-capture 快速记录设置
#+BEGIN_SRC emacs-lisp
(use-package org-capture
  :ensure nil
  :bind ("\e\e c" . (lambda () (interactive) (org-capture)))
  :hook ((org-capture-mode . (lambda ()
                               (setq-local org-complete-tags-always-offer-all-agenda-tags t)))
         (org-capture-mode . delete-other-windows))
  :custom
  (org-capture-use-agenda-date nil)
  ;; define common template
  (org-capture-templates `(("t" "Tasks" entry (file+headline "tasks.org" "Reminders")
                            "* TODO %i%?"
                            :empty-lines-after 1
                            :prepend t)
                           ("n" "Notes" entry (file+headline "capture.org" "Notes")
                            "* %? %^g\n%i\n"
                            :empty-lines-after 1)
                           ;; For EWW
                           ("b" "Bookmarks" entry (file+headline "capture.org" "Bookmarks")
                            "* %:description\n\n%a%?"
                            :empty-lines 1
                            :immediate-finish t)
                           ("d" "Diary")
                           ("dt" "Today's TODO list" entry (file+olp+datetree "diary.org")
                            "* Today's TODO list [/]\n%T\n\n** TODO %?"
                            :empty-lines 1
                            :jump-to-captured t)
                           ("do" "Other stuff" entry (file+olp+datetree "diary.org")
                            "* %?\n%T\n\n%i"
                            :empty-lines 1
                            :jump-to-captured t)
                           ))
  )
#+END_SRC
** denote 笔记设置
+ [[https://protesilaos.com/emacs/denote][denote]] 是一个轻量级的笔记插件，拥有良好的文件名命名模板
#+BEGIN_SRC emacs-lisp
(use-package denote
  :ensure t
  :hook (dired-mode . denote-dired-mode-in-directories)
  :bind (("C-c d n" . denote)
         ("C-c d d" . denote-date)
         ("C-c d t" . denote-type)
         ("C-c d s" . denote-subdirectory)
         ("C-c d f" . denote-open-or-create)
         ("C-c d r" . denote-dired-rename-file))
  :init
  (with-eval-after-load 'org-capture
    (setq denote-org-capture-specifiers "%l\n%i\n%?")
    (add-to-list 'org-capture-templates
                 '("N" "New note (with denote.el)" plain
                   (file denote-last-path)
                   #'denote-org-capture
                   :no-save t
                   :immediate-finish nil
                   :kill-buffer t
                   :jump-to-captured t)))
  :config
  (setq denote-directory (expand-file-name "~/org/"))
  (setq denote-known-keywords '("emacs" "entertainment" "reading" "studying"))
  (setq denote-infer-keywords t)
  (setq denote-sort-keywords t)
  ;; org is default, set others such as text, markdown-yaml, markdown-toml
  (setq denote-file-type nil)
  (setq denote-prompts '(title keywords))

  ;; We allow multi-word keywords by default.  The author's personal
  ;; preference is for single-word keywords for a more rigid workflow.
  (setq denote-allow-multi-word-keywords t)
  (setq denote-date-format nil)

  ;; If you use Markdown or plain text files (Org renders links as buttons
  ;; right away)
  (add-hook 'find-file-hook #'denote-link-buttonize-buffer)
  (setq denote-dired-rename-expert nil)

  ;; OR if only want it in `denote-dired-directories':
  (add-hook 'dired-mode-hook #'denote-dired-mode-in-directories)
  )
#+END_SRC
** Org-src
- 代码块基础设置
#+BEGIN_SRC emacs-lisp
(use-package org-src
  :ensure nil
  :hook (org-babel-after-execute . org-redisplay-inline-images)
  :bind (("s-l" . show-line-number-in-src-block)
         :map org-src-mode-map
         ("C-c C-c" . org-edit-src-exit))
  :init
  ;; 设置代码块的默认头参数
  (setq org-babel-default-header-args
        '(
          (:eval    . "never-export")     ; 导出时不执行代码块
          (:session . "none")
          (:results . "replace")          ; 执行结果替换
          (:exports . "both")             ; 导出代码和结果
          (:cache   . "no")
          (:noweb   . "no")
          (:hlines  . "no")
          (:wrap    . "results")          ; 结果通过#+begin_results包裹
          (:tangle  . "no")               ; 不写入文件
          ))
  :config
  ;; ==================================
  ;; 如果出现代码运行结果为乱码，可以参考：
  ;; https://github.com/nnicandro/emacs-jupyter/issues/366
  ;; ==================================
  (defun display-ansi-colors ()
    (ansi-color-apply-on-region (point-min) (point-max)))
  (add-hook 'org-babel-after-execute-hook #'display-ansi-colors)

  ;; ==============================================
  ;; 通过overlay在代码块里显示行号，s-l显示，任意键关闭
  ;; ==============================================
  (defvar number-line-overlays '()
    "List of overlays for line numbers.")

  (defun show-line-number-in-src-block ()
    (interactive)
    (save-excursion
      (let* ((src-block (org-element-context))
             (nlines (- (length
                         (s-split
                          "\n"
                          (org-element-property :value src-block)))
                        1)))
        (goto-char (org-element-property :begin src-block))
        (re-search-forward (regexp-quote (org-element-property :value src-block)))
        (goto-char (match-beginning 0))

        (cl-loop for i from 1 to nlines
                 do
                 (beginning-of-line)
                 (let (ov)
                   (setq ov (make-overlay (point) (point)))
                   (overlay-put ov 'before-string (format "%3s | " (number-to-string i)))
                   (add-to-list 'number-line-overlays ov))
                 (next-line))))

    ;; now read a char to clear them
    (read-key "Press a key to clear numbers.")
    (mapc 'delete-overlay number-line-overlays)
    (setq number-line-overlays '()))

  ;; =================================================
  ;; 执行结果后，如果结果所在的文件夹不存在将自动创建
  ;; =================================================
  (defun check-directory-exists-before-src-execution (orig-fun
                                                      &optional arg
                                                      info
                                                      params)
    (when (and (assq ':file (cadr (cdr (org-babel-get-src-block-info))))
               (member (car (org-babel-get-src-block-info)) '("mermaid" "ditaa" "dot" "lilypond" "plantuml" "gnuplot" "d2")))
      (let ((foldername (file-name-directory (alist-get :file (nth 2 (org-babel-get-src-block-info))))))
        (if (not (file-exists-p foldername))
            (mkdir foldername)))))
  (advice-add 'org-babel-execute-src-block :before #'check-directory-exists-before-src-execution)

  ;; =================================================
  ;; 自动给结果的图片加上相关属性
  ;; =================================================
  (setq original-image-width-before-del "400") ; 设置图片的默认宽度为400
  (setq original-caption-before-del "")        ; 设置默认的图示文本为空

  (defun insert-attr-decls ()
    "insert string before babel execution results"
    (insert (concat "\n#+CAPTION:"
                    original-caption-before-del
                    "\n#+ATTR_ORG: :width "
                    original-image-width-before-del
                    "\n#+ATTR_LATEX: :width "
                    (if (>= (/ (string-to-number original-image-width-before-del) 800.0) 1)
                        "1.0"
                      (number-to-string (/ (string-to-number original-image-width-before-del) 800.0)))
                    "\\linewidth :float nil"
                    "\n#+ATTR_HTML: :width "
                    original-image-width-before-del
                    )))

  (defun insert-attr-decls-at (s)
    "insert string right after specific string"
    (let ((case-fold-search t))
      (if (search-forward s nil t)
          (progn
            ;; (search-backward s nil t)
            (insert-attr-decls)))))

  (defun insert-attr-decls-at-results (orig-fun
                                       &optional arg
                                       info
                                       param)
    "insert extra image attributes after babel execution"
    (interactive)
    (progn
      (when (member (car (org-babel-get-src-block-info)) '("mermaid" "ditaa" "dot" "lilypond" "plantuml" "gnuplot" "d2"))
        (setq original-image-width-before-del (number-to-string (if-let* ((babel-width (alist-get :width (nth 2 (org-babel-get-src-block-info))))) babel-width (string-to-number original-image-width-before-del))))
        (save-excursion
          ;; `#+begin_results' for :wrap results, `#+RESULTS:' for non :wrap results
          (insert-attr-decls-at "#+begin_results")))
      (org-redisplay-inline-images)))
  (advice-add 'org-babel-execute-src-block :after #'insert-attr-decls-at-results)

  ;; 再次执行时需要将旧的图片相关参数行删除，并从中头参数中获得宽度参数，参考
  ;; https://emacs.stackexchange.com/questions/57710/how-to-set-image-size-in-result-of-src-block-in-org-mode
  (defun get-attributes-from-src-block-result (&rest args)
    "get information via last babel execution"
    (let ((location (org-babel-where-is-src-block-result))
          ;; 主要获取的是图示文字和宽度信息，下面这个正则就是为了捕获这两个信息
          (attr-regexp "[:blank:]*#\\+\\(ATTR_ORG: :width \\([0-9]\\{3\\}\\)\\|CAPTION:\\(.*\\)\\)"))
      (setq original-caption-before-del "") ; 重置为空
      (when location
        (save-excursion
          (goto-char location)
          (when (looking-at (concat org-babel-result-regexp ".*$"))
            (next-line 2)               ; 因为有个begin_result的抽屉，所以往下2行
            ;; 通过正则表达式来捕获需要的信息
            (while (looking-at attr-regexp)
              (when (match-string 2)
                (setq original-image-width-before-del (match-string 2)))
              (when (match-string 3)
                (setq original-caption-before-del (match-string 3)))
              (next-line)               ; 因为设置了:wrap，所以这里不需要删除这一行
              )
            )))))
  (advice-add 'org-babel-execute-src-block :before #'get-attributes-from-src-block-result)

  :custom
  ;; 代码块语法高亮
  (org-src-fontify-natively t)
  ;; 使用编程语言的TAB绑定设置
  (org-src-tab-acts-natively t)
  ;; 保留代码块前面的空格
  (org-src-preserve-indentation t)
  ;; 代码块编辑窗口的打开方式：当前窗口+代码块编辑窗口
  (org-src-window-setup 'reorganize-frame)
  ;; 执行前是否需要确认
  (org-confirm-babel-evaluate nil)
  ;; 代码块默认前置多少空格
  (org-edit-src-content-indentation 0)
  ;; 代码块的语言模式设置，设置之后才能正确语法高亮
  (org-src-lang-modes '(("C"            . c)
                        ("C++"          . c++)
                        ("bash"         . sh)
                        ("cpp"          . c++)
                        ("elisp"        . emacs-lisp)
                        ("python"       . python)
                        ("shell"        . sh)
                        ("mysql"        . sql)
                        ))
  ;; 在这个阶段，只需要加载默认支持的语言
  (org-babel-load-languages '((python          . t)
                              (awk             . t)
                              (C               . t)
                              (calc            . t)
                              (emacs-lisp      . t)
                              (eshell          . t)
                              (shell           . t)
                              (sql             . t)
                              (css             . t)
                              ))
  )
#+END_SRC
** org-agenda 基本设置
#+BEGIN_SRC emacs-lisp
(use-package org-agenda
  :ensure nil
  :hook (org-agenda-finalize . org-agenda-to-appt)
  :bind (("\e\e a" . org-agenda)
         :map org-agenda-mode-map
         ("i" . (lambda () (interactive) (org-capture nil "d")))
         ("J" . consult-org-agenda))
  :config
  ;; 日程模式的日期格式设置
  (setq org-agenda-format-date 'org-agenda-format-date-aligned)
  (defun org-agenda-format-date-aligned (date)
    "Format a DATE string for display in the daily/weekly agenda, or timeline.

This function makes sure that dates are aligned for easy reading."
    (require 'cal-iso)
    (let* ((dayname (aref cal-china-x-days
                          (calendar-day-of-week date)))
           (day (cadr date))
           (month (car date))
           (year (nth 2 date))
           (day-of-week (calendar-day-of-week date))
           (iso-week (org-days-to-iso-week
                      (calendar-absolute-from-gregorian date)))
           (cn-date (calendar-chinese-from-absolute (calendar-absolute-from-gregorian date)))
           (cn-month (cl-caddr cn-date))
           (cn-day (cl-cadddr cn-date))
           (cn-month-string (concat (aref cal-china-x-month-name
                                          (1- (floor cn-month)))
                                    (if (integerp cn-month)
                                        ""
                                      "（闰月）")))
           (cn-day-string (aref cal-china-x-day-name
                                (1- cn-day)))
           (extra (format " 农历%s%s%s%s"
                          (if (or (eq org-agenda-current-span 'day)
                                  (= day-of-week 1)
                                  (= cn-day 1))
                              cn-month-string
                            "")
                          (if (or (= day-of-week 1)
                                  (= cn-day 1))
                              (if (integerp cn-month) "" "[闰]")
                            "")
                          cn-day-string
                          (if (or (= day-of-week 1)
                                  (eq org-agenda-current-span 'day))
                              (format " 今年第%02d周" iso-week)
                            "")
                          ))
           )
      (format "%04d-%02d-%02d 星期%s%s%s\n" year month
              day dayname extra (concat " 第" (format-time-string "%j") "天"))))

  ;; 显示时间线
  (setq org-agenda-use-time-grid t)
  ;; 设置面包屑分隔符
  ;; (setq org-agenda-breadcrumbs-separator " ❱ ")
  ;; 设置时间线的当前时间指示串
  (setq org-agenda-current-time-string "⏰------------now")
  ;; 时间线范围和颗粒度设置
  (setq org-agenda-time-grid (quote ((daily today)
                                     (0600 0800 1000 1200
                                           1400 1600 1800
                                           2000 2200 2400)
                                     "......" "----------------")))
  ;; 日程视图的前缀设置
  (setq org-agenda-prefix-format '((agenda . " %i %-25:c %5t %s")
                                   (todo   . " %i %-25:c ")
                                   (tags   . " %i %-25:c ")
                                   (search . " %i %-25:c ")))
  ;; 对于计划中的任务在视图里的显示
  (setq org-agenda-scheduled-leaders
        '("计划 " "应在%02d天前开始 "))
  ;; 对于截止日期的任务在视图里的显示
  (setq org-agenda-deadline-leaders
        '("截止 " "还有%02d天到期 " "已经过期%02d天 "))

  ;; =====================
  ;; 自定义日程视图，分别显示TODO，WIP，WIAT中的任务
  ;; n键显示自定义视图，p键纯文本视图，a键默认视图
  ;; =====================
  (defvar my-org-custom-daily-agenda
    `((todo "TODO"
            ((org-agenda-block-separator nil)
             (org-agenda-overriding-header "所有待办任务\n")))
      (todo "WIP"
            ((org-agenda-block-separator nil)
             (org-agenda-overriding-header "\n进行中的任务\n")))
      (todo "WAIT"
            ((org-agenda-block-separator nil)
             (org-agenda-overriding-header "\n等待中的任务\n")))
      (agenda "" ((org-agenda-block-separator nil)
                  (org-agenda-overriding-header "\n今日日程\n"))))
    "Custom agenda for use in `org-agenda-custom-commands'.")
  (setq org-agenda-custom-commands
        `(("n" "Daily agenda and top priority tasks"
           ,my-org-custom-daily-agenda)
          ("p" "Plain text daily agenda and top priorities"
           ,my-org-custom-daily-agenda
           ((org-agenda-with-colors nil)
            (org-agenda-prefix-format "%t %s")
            (org-agenda-current-time-string ,(car (last org-agenda-time-grid)))
            (org-agenda-fontify-priorities nil)
            (org-agenda-remove-tags t))
           ("agenda.txt"))))

  ;; 时间戳格式设置，会影响到 `svg-tag' 等基于正则的设置
  ;; 这里设置完后是 <2022-12-24 星期六> 或 <2022-12-24 星期六 06:53>
  (setq system-time-locale "zh_CN.UTF-8")
  (setq org-time-stamp-formats '("<%Y-%m-%d %A>" . "<%Y-%m-%d %A %H:%M>"))
  ;; 不同日程类别间的间隔
  (setq org-cycle-separator-lines 2)
  :custom
  ;; 设置需要被日程监控的org文件
  (org-agenda-files
   (list (expand-file-name "tasks.org" org-directory)
         (expand-file-name "diary.org" org-directory)
         (expand-file-name "phd.org" org-directory)
         (expand-file-name "habits.org" org-directory)
         (expand-file-name "mail.org" org-directory)
         (expand-file-name "emacs-config.org" user-emacs-directory)
         ))
  ;; 设置org的日记文件
  (org-agenda-diary-file (expand-file-name "diary.org" org-directory))
  ;; 日记插入精确时间戳
  (org-agenda-insert-diary-extract-time t)
  ;; 设置日程视图更加紧凑
  ;; (org-agenda-compact-blocks t)
  ;; 日程视图的块分隔符
  (org-agenda-block-separator ?─)
  ;; 日视图还是周视图，通过 v-d, v-w, v-m, v-y 切换视图，默认周视图
  (org-agenda-span 'day)
  ;; q退出时删除agenda缓冲区
  (org-agenda-sticky t)
  ;; 是否包含直接日期
  (org-agenda-include-deadlines t)
  ;; 禁止日程启动画面
  (org-agenda-inhibit-startup t)
  ;; 显示每一天，不管有没有条目
  (org-agenda-show-all-dates t)
  ;; 时间不足位时前面加0
  (org-agenda-time-leading-zero t)
  ;; 日程同时启动log mode
  (org-agenda-start-with-log-mode t)
  ;; 日程同时启动任务时间记录报告模式
  (org-agenda-start-with-clockreport-mode t)
  ;; 截止的任务完成后不显示
  ;; (org-agenda-skip-deadline-if-done t)
  ;; 当计划的任务完成后不显示
  (org-agenda-skip-scheduled-if-done t)
  ;; 计划过期上限
  (org-scheduled-past-days 365)
  ;; 计划截止上限
  (org-deadline-past-days 365)
  ;; 计划中的任务不提醒截止时间
  (org-agenda-skip-deadline-prewarning-if-scheduled 1)
  (org-agenda-skip-scheduled-if-deadline-is-shown t)
  (org-agenda-skip-timestamp-if-deadline-is-shown t)
  ;; 设置工时记录报告格式
  (org-agenda-clockreport-parameter-plist
   '(:link t :maxlevel 5 :fileskip0 t :compact nil :narrow 80))
  (org-agenda-columns-add-appointments-to-effort-sum t)
  (org-agenda-restore-windows-after-quit t)
  (org-agenda-window-setup 'current-window)
  ;; 标签显示的位置，第100列往前右对齐
  (org-agenda-tags-column -100)
  ;; 从星期一开始作为一周第一天
  (org-agenda-start-on-weekday 1)
  ;; 是否使用am/pm
  ;; (org-agenda-timegrid-use-ampm nil)
  ;; 搜索是不看时间
  (org-agenda-search-headline-for-time nil)
  ;; 提前3天截止日期到期告警
  (org-deadline-warning-days 3)
  )
#+END_SRC
** calendar 基本设置
#+BEGIN_SRC emacs-lisp
(use-package calendar
  :ensure nil
  :hook (calendar-today-visible . calendar-mark-today)
  :custom
  ;; 是否显示中国节日，我们使用 `cal-chinese-x' 插件
  (calendar-chinese-all-holidays-flag nil)
  ;; 是否显示节日
  (calendar-mark-holidays-flag t)
  ;; 是否显示Emacs的日记，我们使用org的日记
  (calendar-mark-diary-entries-flag nil)
  ;; 数字方式显示时区，如 +0800，默认是字符方式如 CST
  (calendar-time-zone-style 'numeric)
  ;; 日期显示方式：year/month/day
  (calendar-date-style 'iso)
  ;; 中文天干地支设置
  (calendar-chinese-celestial-stem ["甲" "乙" "丙" "丁" "戊" "己" "庚" "辛" "壬" "癸"])
  (calendar-chinese-terrestrial-branch ["子" "丑" "寅" "卯" "辰" "巳" "午" "未" "申" "酉" "戌" "亥"])
  ;; 设置中文月份
  (calendar-month-name-array ["一月" "二月" "三月" "四月" "五月" "六月" "七月" "八月" "九月" "十月" "十一月" "十二月"])
  ;; 设置星期标题显示
  (calendar-day-name-array ["日" "一" "二" "三" "四" "五" "六"])
  ;; 周一作为一周第一天
  (calendar-week-start-day 1)
  )
#+END_SRC
** 日历中文增强
+ 通过 [[https://github.com/xwl/cal-china-x][cal-china-x]] 插件进一步增强中文日历，显示农历等信息
#+BEGIN_SRC emacs-lisp
;; 时间解析增加中文拼音
(use-package parse-time
  :ensure nil
  :defer t
  :config
  (setq parse-time-months
        (append '(("yiy" . 1) ("ery" . 2) ("sany" . 3)
                  ("siy" . 4) ("wuy" . 5) ("liuy" . 6)
                  ("qiy" . 7) ("bay" . 8) ("jiuy" . 9)
                  ("shiy" . 10) ("shiyiy" . 11) ("shiery" . 12)
                  ("yiyue" . 1) ("eryue" . 2) ("sanyue" . 3)
                  ("siyue" . 4) ("wuyue" . 5) ("liuyue" . 6)
                  ("qiyue" . 7) ("bayue" . 8) ("jiuyue" . 9)
                  ("shiyue" . 10) ("shiyiyue" . 11) ("shieryue" . 12))
                parse-time-months))

  (setq parse-time-weekdays
        (append '(("zri" . 0) ("zqi" . 0)
                  ("zyi" . 1) ("zer" . 2) ("zsan" . 3)
                  ("zsi" . 4) ("zwu" . 5) ("zliu" . 6)
                  ("zr" . 0) ("zq" . 0)

                  ("zy" . 1) ("ze" . 2) ("zs" . 3)
                  ("zsi" . 4) ("zw" . 5) ("zl" . 6))
                parse-time-weekdays)))

;; 中国节日设置
(use-package cal-china-x
  :ensure t
  :commands cal-china-x-setup
  :hook (after-init . cal-china-x-setup)
  :config
  ;; 重要节日设置
  (setq cal-china-x-important-holidays cal-china-x-chinese-holidays)
  ;; 所有节日设置
  (setq cal-china-x-general-holidays
        '(;;公历节日
          (holiday-fixed 1 1 "元旦")
          (holiday-fixed 2 14 "情人节")
          (holiday-fixed 3 8 "妇女节")
          (holiday-fixed 3 14 "白色情人节")
          (holiday-fixed 4 1 "愚人节")
          (holiday-fixed 5 1 "劳动节")
          (holiday-fixed 5 4 "青年节")
          (holiday-float 5 0 2 "母亲节")
          (holiday-fixed 6 1 "儿童节")
          (holiday-float 6 0 3 "父亲节")
          (holiday-fixed 9 10 "教师节")
          (holiday-fixed 10 1 "国庆节")
          (holiday-fixed 10 2 "国庆节")
          (holiday-fixed 10 3 "国庆节")
          (holiday-fixed 10 24 "程序员节")
          (holiday-fixed 11 11 "双11购物节")
          (holiday-fixed 12 25 "圣诞节")
          ;; 农历节日
          (holiday-lunar 12 30 "春节" 0)
          (holiday-lunar 1 1 "春节" 0)
          (holiday-lunar 1 2 "春节" 0)
          (holiday-lunar 1 15 "元宵节" 0)
          (holiday-solar-term "清明" "清明节")
          (holiday-solar-term "小寒" "小寒")
          (holiday-solar-term "大寒" "大寒")
          (holiday-solar-term "立春" "立春")
          (holiday-solar-term "雨水" "雨水")
          (holiday-solar-term "惊蛰" "惊蛰")
          (holiday-solar-term "春分" "春分")
          (holiday-solar-term "谷雨" "谷雨")
          (holiday-solar-term "立夏" "立夏")
          (holiday-solar-term "小满" "小满")
          (holiday-solar-term "芒种" "芒种")
          (holiday-solar-term "夏至" "夏至")
          (holiday-solar-term "小暑" "小暑")
          (holiday-solar-term "大暑" "大暑")
          (holiday-solar-term "立秋" "立秋")
          (holiday-solar-term "处暑" "处暑")
          (holiday-solar-term "白露" "白露")
          (holiday-solar-term "秋分" "秋分")
          (holiday-solar-term "寒露" "寒露")
          (holiday-solar-term "霜降" "霜降")
          (holiday-solar-term "立冬" "立冬")
          (holiday-solar-term "小雪" "小雪")
          (holiday-solar-term "大雪" "大雪")
          (holiday-solar-term "冬至" "冬至")
          (holiday-lunar 5 5 "端午节" 0)
          (holiday-lunar 8 15 "中秋节" 0)
          (holiday-lunar 7 7 "七夕情人节" 0)
          (holiday-lunar 12 8 "腊八节" 0)
          (holiday-lunar 9 9 "重阳节" 0)))
  ;; 设置日历的节日，通用节日已经包含了所有节日
  (setq calendar-holidays (append cal-china-x-general-holidays)))
#+END_SRC
** org-habit 习惯管理
#+BEGIN_SRC emacs-lisp
(use-package org-habit
  :ensure nil
  :defer t
  :custom
  (org-habit-show-habits t)
  (org-habit-graph-column 70)
  (org-habit-show-all-today t)
  (org-habit-show-done-always-green t)
  (org-habit-scheduled-past-days t)
  ;; org habit show 7 days before today and 7 days after today. ! means not done. * means done.
  (org-habit-preceding-days 7)
  )
#+END_SRC
** init-org.el 文件尾
#+BEGIN_SRC emacs-lisp
(provide 'init-org)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-org.el ends here
#+END_SRC
* init-completion.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-completion.el :mkdirp yes
:END:
** init-completion.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-completion.el --- Completion settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC
** yasnippet
+ 提供补全模板，参考 [[http://joaotavora.github.io/yasnippet/][yasnippet manual]]
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :diminish yas-minor-mode
    :hook ((after-init . yas-reload-all)
           ((prog-mode LaTeX-mode org-mode) . yas-minor-mode))
    :config
    ;; Suppress warning for yasnippet code.
    (require 'warnings)
    (yas-global-mode 1)
    (add-to-list 'warning-suppress-types '(yasnippet backquote-change))

    (setq yas-prompt-functions '(yas-x-prompt yas-dropdown-prompt))
    (defun smarter-yas-expand-next-field ()
      "Try to `yas-expand' then `yas-next-field' at current cursor position."
      (interactive)
      (let ((old-point (point))
            (old-tick (buffer-chars-modified-tick)))
        (yas-expand)
        (when (and (eq old-point (point))
                   (eq old-tick (buffer-chars-modified-tick)))
          (ignore-errors (yas-next-field))))))
#+END_SRC
** marginalia
+ marginalia 插件给迷你缓冲区的补全候选条目添加一些提示。
#+BEGIN_SRC emacs-lisp
;; minibuffer helpful annotations
(use-package marginalia
  :ensure t
  :hook (after-init . marginalia-mode)
  :custom
  (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil)))
#+END_SRC
** orderless
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :defer 1
  :custom
  (completion-styles '(orderless basic))
  (completion-category-defaults nil)
  (completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC
** all-the-icons-completion
+ 借助 [[https://github.com/iyefrat/all-the-icons-completion][all-the-icons-completion]] 插件为迷你缓冲区的补全系统添加美观图标
#+BEGIN_SRC emacs-lisp
(use-package all-the-icons-completion
  :ensure t
  :hook ((after-init . all-the-icons-completion-mode)
         (marginalia-mode . all-the-icons-completion-marginalia-setup))
  )
#+END_SRC
** posframe
+ tumashu 开发的 [[https://github.com/tumashu/posframe][posframe]] 插件支持 posframe 的弹出
#+BEGIN_SRC emacs-lisp
(use-package posframe
  :ensure t)
#+END_SRC
** lsp-bridge
+ [[https://github.com/manateelazycat/lsp-bridge][lsp-bridge]] 插件旨在实现Emacs生态中最快的LSP客户端。
#+BEGIN_SRC emacs-lisp
;;lsp-bridge
;;; https://github.com/manateelazycat/lsp-bridge/blob/master/README.zh-CN.md
(add-to-list 'load-path "~/.emacs.d/lsp-bridge/")
(require 'lsp-bridge)
(global-lsp-bridge-mode)
(setq lsp-bridge-python-lsp-server "pyright")
#+END_SRC
** init-completion.el 文件尾
#+BEGIN_SRC emacs-lisp
(provide 'init-completion)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-completion.el ends here
#+END_SRC
* init-tools.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-tools.el :mkdirp yes
:END:
** init-tools.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-tools.el --- Tools settings -*- lexical-binding: t -*-
;;; Commentary: Useful tools to make Emacs efficient!

;;; Code:
#+END_SRC
** exec-path-from-shell
+ purcell 开发的 [[https://github.com/purcell/exec-path-from-shell][exec-path-from-shell]] 让Emacs使用用户shell所设定的$PATH
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell
  :ensure t
  :config
  (when (memq window-system '(mac ns x))
    (exec-path-from-shell-initialize)))
#+END_SRC
** restart-emacs 重启
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :ensure t)
#+END_SRC
** which-key 快捷键
+ [[https://github.com/justbur/emacs-which-key][which-key]] 插件将提示快捷键
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :init (which-key-mode))
#+END_SRC
** emacs-rime
#+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path "~/.emacs.d/emacs-rime/")
;; (require 'rime)

;; ;; 雾凇拼音
;; ;;; https://emacs-china.org/t/emacs-rime/24125
;; ;;; https://github.com/iDvel/rime-ice

;; ;;; Code:
;; (setq rime-user-data-dir "~/.local/share/fcitx5/rime")

;; (setq rime-posframe-properties
;;       (list :background-color "#333333"
;;             :foreground-color "#dcdccc"
;;             :font "WenQuanYi Micro Hei Mono-14"
;;             :internal-border-width 10))

;; (setq default-input-method "rime"
;;       rime-show-candidate 'posframe)
#+END_SRC
** fanyi 在线词典
#+BEGIN_SRC emacs-lisp
(use-package fanyi
  :ensure t
  :bind-keymap ("\e\e =" . fanyi-map)
  :bind (:map fanyi-map
              ("w" . fanyi-dwim2)
              ("i" . fanyi-dwim))
  :init
  ;; to support `org-store-link' and `org-insert-link'
  (require 'ol-fanyi)
  ;; 如果当前指针下有单词，选择当前单词，否则选择剪贴板
  (with-eval-after-load 'org-capture
    (add-to-list 'org-capture-templates
                 '("w" "New word" entry (file+olp+datetree "20221001T221032--vocabulary__studying.org" "New")
                   "* %^{Input the new word:|%(cond ((with-current-buffer (org-capture-get :original-buffer) (thing-at-point 'word 'no-properties))) ((clipboard/get)))}\n\n[[fanyi:%\\1][%\\1]]\n\n[[http://dict.cn/%\\1][海词：%\\1]]%?"
                   :tree-type day
                   :empty-lines 1
                   :jump-to-captured t)))
  :config
  (defvar fanyi-map nil "keymap for `fanyi")
  (setq fanyi-map (make-sparse-keymap))
  (setq fanyi-sound-player "mpv")
  :custom
  (fanyi-providers '(;; 海词
                     fanyi-haici-provider
                     ;; 有道同义词词典
                     fanyi-youdao-thesaurus-provider
                     ;; Longman
                     fanyi-longman-provider
                     ;; ;; Etymonline
                     ;; fanyi-etymon-provider
                     ;; ;; LibreTranslate
                     ;; fanyi-libre-provider
                     )))
#+END_SRC
** Beancount 复式簿记法
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'beancount)
(add-to-list 'auto-mode-alist '("\\.bean\\'" . beancount-mode))
;; (add-hook 'beancount-mode-hook
;;   (lambda () (setq-local electric-indent-chars nil)))
(add-hook 'beancount-mode-hook #'outline-minor-mode)
(define-key beancount-mode-map (kbd "C-c C-n") #'outline-next-visible-heading)
(define-key beancount-mode-map (kbd "C-c C-p") #'outline-previous-visible-heading)
#+END_SRC
** init-tools.el 文件尾
#+BEGIN_SRC emacs-lisp
(provide 'init-tools)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-tools.el ends here
#+END_SRC
* init-dev.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-dev.el :mkdirp yes
:END:
** init-dev.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-dev.el --- Development settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC
** projectile 项目管理
+ 参考 [[https://zhuanlan.zhihu.com/p/467681146][专业 Emacs 入门（七）：插件篇——编程开发类]]
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :bind (("C-c p" . projectile-command-map))
  :config
  (setq projectile-mode-line "Projectile")
  (setq projectile-track-known-projects-automatically nil))

(use-package counsel-projectile
  :ensure t
  :after (projectile)
  :init (counsel-projectile-mode))
#+END_SRC
** treemacs 工作区管理
#+BEGIN_SRC emacs-lisp
;; all-the-icons
;; @source https://github.com/domtronn/all-the-icons.el#installation
;; On Windows, after downloading the fonts, one needs to manually install them
;; M-x package-install RET all-the-icons
;; restart-emacs, M-x all-the-icons-install-fonts
(use-package all-the-icons
  :if (display-graphic-p))

;; depend on all-the-icons
(use-package treemacs
  :ensure t
  :defer t
  :config
  (treemacs-tag-follow-mode)
  :bind
  (:map global-map
        ("M-0"       . treemacs-select-window)
        ("C-x t 1"   . treemacs-delete-other-windows)
        ("C-x t t"   . treemacs)
        ("C-x t B"   . treemacs-bookmark)
        ;; ("C-x t C-t" . treemacs-find-file)
        ("C-x t M-t" . treemacs-find-tag))
  (:map treemacs-mode-map
	("/" . treemacs-advanced-helpful-hydra)))

(use-package treemacs-projectile
  :ensure t
  :after (treemacs projectile))

(use-package lsp-treemacs
  :ensure t
  :after (treemacs lsp))
#+END_SRC
** magit 版本管理
+ 在 Emacs 里进行基于 magit 的版本控制
#+BEGIN_SRC emacs-lisp
;; magit
;;; scoop install git
;;; scoop install delta @ https://github.com/dandavison/delta
;;; fix ~/.gitconfig
(use-package magit
  :ensure t
  :hook (git-commit-mode . flyspell-mode)
  :bind (("C-x g"   . magit-status)
         ("C-x M-g" . magit-dispatch)
         ("C-c M-g" . magit-file-dispatch))
  :custom
  (magit-diff-refine-hunk t)
  (magit-ediff-dwim-show-on-hunks t))
#+END_SRC
** diff-hl 高亮显示修改部分
+ [[https://github.com/dgutov/diff-hl][diff-hl]] 插件在左侧高亮显示相对于远程仓库的修改部分
#+BEGIN_SRC emacs-lisp
;; diff-hl
(use-package diff-hl
  :ensure t
  :hook ((dired-mode         . diff-hl-dired-mode-unless-remote)
         (magit-pre-refresh  . diff-hl-magit-pre-refresh)
         (magit-post-refresh . diff-hl-magit-post-refresh))
  :init
  (global-diff-hl-mode t)
  :config
  ;; When Emacs runs in terminal, show the indicators in margin instead.
  (unless (display-graphic-p)
    (diff-hl-margin-mode)))
#+END_SRC
** magit-delta 增强 git diff
#+BEGIN_SRC emacs-lisp
(use-package magit-delta
  :ensure t
  :hook (magit-mode . magit-delta-mode)
  :config
  (setq magit-delta-hide-plus-minus-markers nil)
  )
#+END_SRC
** paren 高亮匹配括号
#+BEGIN_SRC emacs-lisp
(use-package paren
  :ensure nil
  :hook (after-init . show-paren-mode)
  :custom
  (show-paren-when-point-inside-paren t)
  (show-paren-when-point-in-periphery t))
#+END_SRC
** rainbow-delimeters 多彩括号
+ [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] 插件多彩显示括号等分隔符
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC
** emacs-lisp 语言设置
#+BEGIN_SRC emacs-lisp
(use-package elisp-mode
  :ensure nil
  :after org
  :bind (:map emacs-lisp-mode-map
              ("C-c C-b" . eval-buffer)
              ("C-c C-c" . eval-to-comment)
              :map lisp-interaction-mode-map
              ("C-c C-c" . eval-to-comment)
              :map org-mode-map
              ("C-c C-;" . eval-to-comment)
              )
  :init
  ;; for emacs-lisp org babel
  (add-to-list 'org-babel-default-header-args:emacs-lisp
             '(:results . "value pp"))
  :config
  (defconst eval-as-comment-prefix " ⇒ ")
  (defun eval-to-comment (&optional arg)
    (interactive "P")
    ;; (if (not (looking-back ";\\s*"))
    ;;     (call-interactively 'comment-dwim))
    (call-interactively 'comment-dwim)
    (progn
      (search-backward ";")
      (forward-char 1))
    (delete-region (point) (line-end-position))
    (save-excursion
      (let ((current-prefix-arg '(4)))
        (call-interactively 'eval-last-sexp)))
    (insert eval-as-comment-prefix)
    (end-of-line 1))
  )
#+END_SRC
** markdown-mode 设置
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown")
  :bind (:map markdown-mode-map
              ("C-c C-e" . markdown-do)))
#+END_SRC
** init-dev.el 文件尾
#+BEGIN_SRC emacs-lisp
(provide 'init-dev)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-dev.el ends here
#+END_SRC
* init-research.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-research.el :mkdirp yes
:END:
** init-research.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-research.el --- Research settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC
** 加载 cdLaTeX
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/lisp/")
(require 'cdlatex)
#+END_SRC
** LaTeX 模式设置
#+BEGIN_SRC emacs-lisp
;; 打开TeX文件时应执行的命令
(defun my-latex-hook ()
  (turn-on-cdlatex)          ;; 加载cdlatex
  (turn-on-reftex)           ;; 加载reftex
  (prettify-symbols-mode t)  ;; 加载prettify-symbols-mode
  (outline-minor-mode)       ;; 加载outline-mode
  (outline-hide-body))       ;; 打开文件时只显示章节标题
#+END_SRC
** Prettify
#+BEGIN_SRC emacs-lisp
;; customize prettify
;; https://en.wikipedia.org/wiki/Mathematical_operators_and_symbols_in_Unicode
;; 可加入原列表中没有的编码、简化常用命令
(require 'tex-mode) ;; 载入 tex--prettify-symbols-alist 变量
(defun my/more-prettified-symbols ()
  (mapc (lambda (pair) (delete pair tex--prettify-symbols-alist))
        '(("\\supset" . 8835)))
  (mapc (lambda (pair) (cl-pushnew pair tex--prettify-symbols-alist))
        '(("\\Z" . 8484)
          ("\\Q" . 8474)
          ("\\N" . 8469)
          ("\\R" . 8477)
          ("\\eps" . 949)
          ("\\inf" . #x22C0) 
          ("\\sup". #x22C1)
          ("\\ONE" . #x1D7D9)
          ("\\mathbb{S}" . #x1D54A)
          ("\\PP" . #x2119)
          ("\\Ps" . #x1D5AF )
          ("\\Pp" . #x1D40F)
          ("\\E" . #x1D5A4)
          ("\\Ee" . #x1D404)
          ("\\EE" . #x1D53C )
          ("\\Fc" . #x2131)
          ("\\Nc" . #x1D4A9))))
(my/more-prettified-symbols) ;; 读入自定义 prettify 符号

(setq prettify-symbols-unprettify-at-point t)  ;; 自动展开光标附近的宏命令
#+END_SRC
** TeX 基础配置
#+BEGIN_SRC emacs-lisp
;; tex
;; @source https://github.com/jwiegley/use-package/issues/379#issuecomment-246161500
(use-package tex
  :defer t
  :ensure auctex
  :custom
  ;; 对新文件自动解析 (usepackage, bibliograph, newtheorem) 等信息
  (TeX-parse-selt t)
  (TeX-PDF-mode t)
  ;; 正向与反向搜索设置
  (TeX-source-correlate-mode t)
  (TeX-source-correlate-method 'synctex)
  ;; 使用pdf-tools打开PDF
  (TeX-view-program-selection '((output-pdf "PDF Tools")))
  :config
  (setq TeX-auto-save t)
  ;; 编译时问询主文件名称
  (setq-default TeX-master t)                               
  ;; 编译后更新pdf文件
  (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
  ;; 加载LaTeX模式设置
  (add-hook 'LaTeX-mode-hook 'my-latex-hook)
  ;; XeLaTeX 支持
  (add-hook 'LaTeX-mode-hook (lambda()
  (add-to-list 'TeX-command-list '("XeLaTeX" "%`xelatex%(mode)%' %t" TeX-run-TeX nil t))
  (setq TeX-save-query  nil )
  (setq TeX-show-compilation t))))
#+END_SRC
** pdf-tools PDF阅读器
#+BEGIN_SRC emacs-lisp
;; pdf-tools
;;; Windows Installation
;;;; M-x package-list-packages -> pdf-tools (from melpa-stable)
;;;; scoop install msys2
;;;; open mingw64.exe under msys2
;;;; pacman -S mingw-w64-x86_64-texlive-full
;;;; pacman -S mingw-w64-x86_64-emacs-pdf-toool-s-server
;;;; add E:\Scoop\apps\msys2\current\mingw64\bin to environment variable
(use-package pdf-tools
  :mode ("\\.pdf\\'" . pdf-view-mode)                           ;; pdf 文件默认打开方式
  :bind
  (:map pdf-view-mode-map
        ("d" . pdf-view-next-page-command)                      ;; 向后翻页
        ("a" . pdf-view-previous-page-command)                  ;; 向前翻页
        ("s" . pdf-view-scroll-up-or-next-page)                 ;; 向下滑动
        ("w" . pdf-view-scroll-down-or-previous-page)           ;; 向上滑动
   :map pdf-history-minor-mode-map
        ("b" . pdf-history-backward)
   :map pdf-annot-minor-mode-map
        ("C-a a" . pdf-annot-add-highlight-markup-annotation)
        ("C-a s" . pdf-annot-add-squiggly-markup-annotation)
        ("C-a u" . pdf-annot-add-underline-markup-annotation)
        ("C-a d" . pdf-annot-delete))
  :custom
  (pdf-view-midnight-colors '("#000000" . "#9bCD9b"))           ;; 夜间模式设置绿色底色
  (native-comp-deferred-compilation-deny-list '(".*pdf.*"))     ;; 禁用 =pdf-tools= 有关文件的本地编译
  :config
  (require 'pdf-annot)                                          ;; 设置 pdf-annot-minor-mode-map
  (require 'pdf-history)                                        ;; 设置 pdf-history-minor-mode-map
  (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)  ;; 默认夜间模式
  (add-hook 'pdf-view-mode-hook 'pdf-view-fit-width-to-window)  ;; 打开PDF时自动缩放
  (pdf-tools-install))
#+END_SRC
** org-download
#+BEGIN_SRC emacs-lisp
;; 对于Windows系统，需要安装ImageMagick，并保证magick.exe在PATH变量的路径中
;;; 用msys2安装: pacman -S mingw-w64-x86_64-imagemagick
(use-package org-download
  :ensure async ;; 因为不是从melpa安装，需要手动保证async安装
  :defer t ;; 延迟加载
  :load-path "~/.emacs.d/lisp/"
  :bind
  (:map org-mode-map
        ("C-M-y" . org-download-clipboard)) ;; 绑定从剪贴板粘贴截图的快捷键
  :custom
  (org-download-heading-lvl 1) ;; 用一级标题给截图文件命名
  :config
  ;; 用同级 ./img 目录放置截图文件
  (setq-default org-download-image-dir "./img"))
#+END_SRC
** org-noter
#+BEGIN_SRC emacs-lisp
(use-package org-noter
  :ensure t
  :defer t
  :custom
  (org-noter-notes-search-path '("~/org/notes/")) ;; 默认笔记路径。设置后从pdf文件中使用=org-noter=命令，会自动在该墓中寻找与文件同名的=.org=笔记文件
  (org-noter-auto-save-last-location t) ;; 自动保存上次阅读位置
  (org-noter-max-short-selected-text-length 20) ;; 修改长/短文本标准，默认为80
  (org-noter-default-heading-title "第 $p$ 页的笔记") ;; 默认短标题格式
  (org-noter-highlight-selected-text t) ;; 选中文字后插入笔记自动高亮
  :bind
  (("C-c n n" . org-noter) ;; 与org-roam配合，打开org-noter的快捷键
   :map org-noter-doc-mode-map ;; 加入左手键位
   ("e" . org-noter-insert-note)
   ("M-e" . org-noter-insert-precise-note)))
#+END_SRC
** init-research.el 文件尾
#+BEGIN_SRC emacs-lisp
(provide 'init-research)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-research.el ends here
#+END_SRC
* init-eaf.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-eaf.el :mkdirp yes
:END:
** init-eaf.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-eaf.el --- emacs-application-framework settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC
** emacs-application-framework
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/site-lisp/emacs-application-framework/")
(require 'eaf)
;;; 配置 EAF 代理
(setq eaf-proxy-type "http")
(setq eaf-proxy-host "127.0.0.1")
(setq eaf-proxy-port "7890")

;; eaf-browser
(require 'eaf-browser)
(setq eaf-browser-continue-where-left-off t)
(setq eaf-browser-enable-adblocker t)
(setq browse-url-browser-function 'eaf-open-browser)

;; eaf-rss-reader
;;; 一些优质RSS订阅源
;;; https://manateelazycat.github.io/feed.xml          ;; manateeLazyCat
;;; https://superliooon.com/feed/                      ;; 即凉
;;; http://blindwith.science/index.xml                 ;; Blind with Science
;;; https://remacs.cc/index.xml                        ;; remacs的世界
;;; https://www.bmpi.dev/index.xml                     ;; BMPI
;;; http://feeds.feedburner.com/ruanyifeng             ;; Ruan YiFeng
;;; https://emacstalk.codeberg.page/podcast/index.xml  ;; EmacsTalk
;;; https://arxiv.org/rss/cs.CV                        ;; ArXiv CV
;;; https://sachachua.com/blog/feed/                   ;; Sacha Chua
;;; https://byvoid.com/zhs/feed.xml                    ;; byvoid
;;; https://www.skyue.com/feed                         ;; skyue
(require 'eaf-rss-reader)

;; eaf-git
(require 'eaf-git)
;; eaf-pdf-viewer
(require 'eaf-pdf-viewer)
;; eaf-image-viewer
(require 'eaf-image-viewer)
;; eaf-video-player
(require 'eaf-video-player)
;; eaf-music-player
(require 'eaf-music-player)

; 下列应用在Windows平台未通过编译, 在Manjaro平台编译成功

;; eaf-terminal
(require 'eaf-terminal)
;; eaf-file-manager
(require 'eaf-file-manager)
;; eaf-system-monitor
(require 'eaf-system-monitor)
;; eaf-markdown-previewer
(require 'eaf-markdown-previewer)
;; eaf-org-previewer
(require 'eaf-org-previewer)
#+END_SRC
** init-eaf.el 文件尾
#+BEGIN_SRC emacs-lisp
(provide 'init-eaf)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-eaf.el ends here
#+END_SRC
* init-ai.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-ai.el :mkdirp yes
:END:
** init-ai.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-ai.el --- AI Tools settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC
** mind-wave
+ [[https://github.com/manateelazycat/mind-wave][mind-wave]] 是 manateeLazyCat 基于ChatGPT API开发的AI插件
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/mind-wave/")
(require 'mind-wave)
(setq mind-wave-auto-change-title nil) ; 避免与auto-save插件的冲突
#+END_SRC
** init-ai.el 文件尾
#+BEGIN_SRC emacs-lisp
(provide 'init-ai)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-ai.el ends here
#+END_SRC
* init-shell.el
:PROPERTIES:
:HEADER-ARGS: :tangle lisp/init-shell.el :mkdirp yes
:END:
** init-shell.el 文件头
#+BEGIN_SRC emacs-lisp
;;; init-shell.el --- (E)shell settings -*- lexical-binding: t -*-
;;; Commentary:

;;; Code:
#+END_SRC
** eshell 基本配置
#+BEGIN_SRC emacs-lisp
(use-package eshell
  :ensure nil
  :functions eshell/alias
  :hook ((eshell-mode . (lambda ()
                          (term-mode-common-init)
                          ;; Remove cmd args word by word
                          (modify-syntax-entry ?- "w")
                          (visual-line-mode 1)
                          (setenv "PAGER" "cat")))
         )
  :config
  (defun term-mode-common-init ()
    "The common initialization for term."
    (setq-local scroll-margin 0)
    (setq-local truncate-lines t)
    )

  ;; 在Emacs里输入vi，直接在buffer里打开文件
  (defalias 'eshell/vi 'find-file)
  (defalias 'eshell/vim 'find-file)

  ;; 语法高亮显示
  (defun eshell/bat (file)
    "cat FILE with syntax highlight."
    (with-temp-buffer
      (insert-file-contents file)
      (let ((buffer-file-name file))
        (delay-mode-hooks
          (set-auto-mode)
          (font-lock-ensure)))
      (buffer-string)))
  (defalias 'eshell/cat 'eshell/bat)

  ;; 交互式进入目录
  (defun eshell/z ()
    "cd to directory with completion."
    (let ((dir (completing-read "Directory: " (ring-elements eshell-last-dir-ring) nil t)))
      (eshell/cd dir)))

  ;; 查找文件
  (defun eshell/f (filename &optional dir)
    "Search for files matching FILENAME in either DIR or the
current directory."
    (let ((cmd (concat
                ;; using find
                (executable-find "find")
                " " (or dir ".")
                " -not -path '*/.git*'"            ; ignore .git directory
                " -and -not -path 'build'"         ; ignore cmake build directory
                " -and -not -path '*/eln-cache*'"  ; ignore eln cache
                " -and -type f -and -iname "
                "'*" filename "*'")))
      (eshell-command-result cmd)))

  :custom
  (eshell-banner-message
   '(format "%s %s\n"
            (propertize (format " %s " (string-trim (buffer-name)))
                        'face 'mode-line-highlight)
            (propertize (current-time-string)
                        'face 'font-lock-keyword-face)))
  (eshell-scroll-to-bottom-on-input 'all)
  (eshell-scroll-to-bottom-on-output 'all)
  (eshell-kill-on-exit t)
  (eshell-kill-processes-on-exit t)
  ;; Don't record command in history if starts with whitespace
  (eshell-input-filter 'eshell-input-filter-initial-space)
  (eshell-error-if-no-glob t)
  (eshell-glob-case-insensitive t)
  ;; set scripts
  (eshell-rc-script (locate-user-emacs-file "etc/eshell/profile"))
  (eshell-login-script (locate-user-emacs-file "etc/eshell/login"))
  )
#+END_SRC
** eshell 的 alias
#+BEGIN_SRC emacs-lisp :tangle etc/eshell/aliases
alias ff find-file $1
alias fo find-file-other-window $1
alias d dired $1
alias ll ls -alh
alias l. ls -dh .*
alias up eshell-up $1
alias pk eshell-up-peek $1
alias less view-file $1
alias more view-file $1
#+END_SRC
** eshell 里的 C-d
+ 我们在使用 =iterm= 时，经常会使用 =C-d= 来结束窗口
+ 在 =Emacs= 里，这个快捷键绑定的是 =delete-char= 函数，通过以下设置令 =C-d= 更智能：
+ 当光标后面有字符的时候，删除光标后的字符，当没有字符的时候，直接退出当前 shell。
#+BEGIN_SRC emacs-lisp
(use-package em-rebind
  :ensure nil
  :commands eshell-delchar-or-maybe-eof)

(use-package esh-mode
  :ensure nil
  :bind (:map eshell-mode-map
              ("C-d" . eshell-delchar-or-maybe-eof)
              ("C-r" . consult-history)
              ("C-l" . eshell/clear))
  )
#+END_SRC
** eshell 的命令历史
+ 扩大 =eshell= 的历史记录：
#+BEGIN_SRC emacs-lisp
(use-package em-hist
  :ensure nil
  :defer t
  :custom
  (eshell-history-size 1024)
  (eshell-hist-ignoredups t)
  (eshell-save-history-on-exit t))
#+END_SRC
** 有些使用term的命令
+ 命令如 top，我们还是使用 term
#+BEGIN_SRC emacs-lisp
;; following commands will run on term instead
(use-package em-term
  :ensure nil
  :defer t
  :custom
  (eshell-visual-commands '("top" "htop" "less" "more"))
  (eshell-visual-subcommands '(("git" "help" "lg" "log" "diff" "show")))
  (eshell-visual-options '(("git" "--help" "--paginate")))
  (eshell-destroy-buffer-when-process-dies t))
#+END_SRC
** 改变eshell的主题
+ [[https://github.com/xuchunyang/eshell-git-prompt][eshell-git-prompt]] 提供了数个好看的 =Eshell= 命令行主题
#+BEGIN_SRC emacs-lisp
(use-package eshell-git-prompt
  :ensure t
  :after esh-mode
  :custom-face
  (eshell-git-prompt-multiline2-dir-face ((t (:foreground "#c09035" :bold t))))
  :config
  (eshell-git-prompt-use-theme 'multiline2)
  )
#+END_SRC
** eshell-syntac-highlighting 语法高亮
+ [[https://github.com/akreisher/eshell-syntax-highlighting][eshell-syntax-highlighting]] 为 =Eshell= 提供语法高亮
#+BEGIN_SRC emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :ensure t
  :hook (eshell-mode . eshell-syntax-highlighting-global-mode)
  :custom-face
  (eshell-syntax-highlighting-shell-command-face ((t (:foreground "#7cc77f" :bold t))))
  )
#+END_SRC
** capf-autosuggest 自动补全
+ [[https://github.com/emacsmirror/capf-autosuggest][capf-autosuggest]] 提供 =Fish= 类似的 =Eshell= 命令自动补全功能
#+BEGIN_SRC emacs-lisp
(use-package capf-autosuggest
  :ensure t
  :hook ((eshell-mode comint-mod) . capf-autosuggest-mode)
  )
#+END_SRC
** eshell-up 快速进入父目录
+ [[https://github.com/peterwvj/eshell-up][eshell-up]] 插件可快速进入当前文件夹的任何父文件夹
+ =up= 命令进入到当前文件夹的任意一级父目录
#+BEGIN_SRC emacs-lisp
(use-package eshell-up
  :ensure t
  :commands (eshell-up eshell-up-peek)
  :config
  ;; to print the matching parent directory before changing to it
  (setq eshell-up-print-parent-dir t)
  )
#+END_SRC
** init-shell.el 文件尾
:PROPERTIES:
:NOTER_DOCUMENT: d:/research/LFRS/Literature/foundationModel/VLP/Masked Autoencoders Are Scalable Vision Learners.pdf
:END:
#+BEGIN_SRC emacs-lisp
(provide 'init-shell)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; init-shell.el ends here
#+END_SRC
