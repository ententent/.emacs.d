;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(read-expression-history extended-command-history TeX-command-history goto-line-history yes-or-no-p-history coding-system-history pdf-annot-color-history org-read-date-history face-name-history buffer-name-history read-number-history empty-history ivy-history swiper-history minibuffer-history org-link--history counsel-M-x-history file-name-history))
(setq extended-command-history '("restart-emacs" "uncomment-region"))
(setq TeX-command-history '(#("View" 0 4 (ivy-index 4 idx 4))))
(setq goto-line-history '("10"))
(setq yes-or-no-p-history '("yes"))
(setq coding-system-history '(#("utf-8" 0 5 (ivy-index 16)) #("gbk" 0 3 (ivy-index 0 idx 816)) #("gbk-dos" 0 7 (ivy-index 2 idx 818)) #("utf-8-dos" 0 9 (ivy-index 1 idx 1035))))
(setq org-read-date-history '("2023-06024    " "2023-04-11 18:00    " "2023-04-10 18:00    " "2023-04-11 6:30    " "2023-04-11 06:20-06:50    " "21:40-22:00    " "22:00    " "20:00-22:00 ++1d    " "2023-04-15 18:00-20:00    " "2023-04-09 20:00-22:00 ++1d    " "2023-04-09 22:00 .+1d    " "2023-04-09 20:00 .+1d    " "2023-04-09 22：00 .+1d    " "2023-04-09 20:00-22:00    " "2023-04-15 21:30-22:00    " "2023-04-15 21：30-22：00    " "2023-04-09 星期日 21:00-21:30    " "    " "2023-04-09 21:00-21:30    "))
(setq face-name-history '("hl-line"))
(setq buffer-name-history '(#("emacs-config.org" 0 16 (ivy-index 2)) #("GitHub - emacs-eaf/eaf-browser: A modern, customizable and extensible browser in Emacs" 0 86 (ivy-index 0)) #("Emacs China" 0 11 (ivy-index 0)) #("mind-wave emacs - Google 搜尋" 0 27 (ivy-index 0)) #("彩云之南" 0 4 (ivy-index 0)) #("https://chat.openai.com" 0 23 (ivy-index 0)) #("GPT-4" 0 5 (ivy-index 0)) #("emacs-config.org<2>" 0 19 (ivy-index 3)) #("LaTeX.org<LaTeX>" 0 16 (ivy-index 2)) #("Git [mawen/aioWriting]" 0 22 (ivy-index 2)) #("Term [~/aioWriting]" 0 19 (ivy-index 2)) #("平凡之路.flac" 0 9 (ivy-index 2)) #("Dir [mawen/Music]" 0 17 (ivy-index 2)) #("emacs-config.html" 0 17 (ivy-index 2)) #("Term [~]" 0 8 (ivy-index 1)) #("eaf-system-monitor" 0 18 (ivy-index 0)) #("EAF Music Player<2>" 0 19 (ivy-index 0)) #("EAF Music Player<3>" 0 19 (ivy-index 0)) #("EAF Music Player" 0 16 (ivy-index 0)) #("*eshell*" 0 8 (ivy-index 0)) #("0002.chat" 0 9 (ivy-index 0)) #("0003.chat" 0 9 (ivy-index 0)) #("*scratch*" 0 9 (ivy-index 0)) #("*mind-wave*" 0 11 (ivy-index 0)) #("*eaf*" 0 5 (ivy-index 0)) #("*lsp-bridge*" 0 12 (ivy-index 0)) #("*Messages*" 0 10 (ivy-index 0)) #("chat04.chat" 0 11 (ivy-index 0)) #("*dashboard*" 0 11 (ivy-index 1)) #("*Customize Face: Hl Line*" 0 25 (ivy-index 1)) #("*Customize Apropos*" 0 19 (ivy-index 0)) #("使我获益终生的4个思维习惯 – 即凉Lion的博客" 0 25 (ivy-index 0)) #("面向产品经理的Emacs教程：22. 在Emacs里看RSS | remacs的世界" 0 42 (ivy-index 0)) #("https://remacs.cc/posts/面向产品经理的emacs教程18.-org-mode写文档的一些小技巧/" 0 60 (ivy-index 0)) #("EAF RSS Reader" 0 14 (ivy-index 0)) #("*eaf-epc con 4*" 0 15 (ivy-index 3)) #("YouTube" 0 7 (ivy-index 1)) #("*lsp-bridge-epc con 4*" 0 22 (ivy-index 0)) #("登录 - Google 帐号" 0 14 (ivy-index 0)) #("https:www.google.com" 0 20 (ivy-index 0)) #("www.manateelazycat.github.io" 0 28 (ivy-index 0)) #("百度一下，你就知道" 0 9 (ivy-index 0)) #("manateelazycat - Google Search" 0 30 (ivy-index 0)) #("manateelazycat (Andy Stewart) · GitHub" 0 38 (ivy-index 0)) #("magit: .emacs.d" 0 15 (ivy-index 0)) #("科技爱好者周刊（第 249 期）：最成功的软件企业家 - 阮一峰的网络日志" 0 37 (ivy-index 0)) #("chatgpt" 0 7 (ivy-index 0))))
(setq ivy-history '(#("*Messages*" 0 10 (ivy-index 5)) #("*lsp-bridge*" 0 12 (ivy-index 5)) #("ent@43.143.190.163:20022/home/ent" 0 33 (ivy-index 0)) #("ent@43.143.190.163:20022/home/ent/disky/" 0 40 (ivy-index 0)) #("*dashboard*" 0 11 (ivy-index 2)) #("0001.chat" 0 9 (ivy-index 2)) #("EAF Music Player" 0 16 (ivy-index 0)) #("[GitHub - emacs-eaf/eaf-browser: A modern, customizable and extensible browser in Emacs] ⇰ https://github.com/emacs-eaf/eaf-browser" 0 131 (ivy-index 4)) #("彩云之南" 0 4 (ivy-index 3)) #("mind-wave emacs - Google 搜尋" 0 27 (ivy-index 0)) #("eaf-system-monitor" 0 18 (ivy-index 8)) #("Dir [mawen/Music]" 0 17 (ivy-index 1)) #("EAF Music Player<3>" 0 19 (ivy-index 0)) #("emacs-config.org" 0 16 (ivy-index 0)) #(".password-store/" 0 16 (ivy-index 0)) #("remote-file/ remote_file" 0 24 (ivy-index 0)) #("next.itellyou.cn" 0 16 (ivy-index 0)) #("Website/next.itellyou.cn" 0 24 (ivy-index 0)) #("Website" 0 7 (ivy-index 0)) #("next" 0 4 (ivy-index 0)) #("cuments/" 0 8 (ivy-index 0)) "Documents/" #("Documents/" 0 10 (ivy-index 0)) #("Outline" 0 7 (idx 0 ivy-index 0)) #("/home/mawen/Documents/(MultiPath++) Efficient Information Fusion and Trajectory Aggregation for Behavior Prediction.org" 0 119 (ivy-index 0)) #("(MultiPath++) Efficient Information Fusion and Trajectory Aggregation for Behavior Prediction.org" 0 97 (ivy-index 0)) #("markdown-mode" 0 13 (ivy-index 0)) #("Input Modalities" 0 16 (ivy-index 0)) #("Input modalities" 0 16 (ivy-index 0)) #("trajectory distribution" 0 23 (ivy-index 0)) #("output trajectory representation" 0 32 (ivy-index 0)) #("trajectory decoding" 0 19 (ivy-index 0)) #("agent interactions" 0 18 (ivy-index 0)) #("motion history" 0 14 (ivy-index 0)) #("Road Encoding" 0 13 (ivy-index 0)) #("Improvements of MultiPath++" 0 27 (ivy-index 0)) #("0016.chat" 0 9 (ivy-index 3)) #("MultiPath framework" 0 19 (ivy-index 0)) #("modeling challenges" 0 19 (ivy-index 0)) #("0 Abstract" 0 10 (ivy-index 0)) #("这是abstract部分的最后一句话" 0 18 (ivy-index 0)) #("第 1 V: 39% H: 18% 页的笔记" 0 22 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/notes/(MultiPath++) Efficient Information Fusion and Trajectory Aggregation for Behavior Prediction.org" 0 138 (ivy-index 0)) #("CVPR_simAgents" 0 14 (ivy-index 1)) #("dajfdklsfjakls" 0 14 (ivy-index 0)) #("sdfasdf" 0 7 (ivy-index 0)) #("sdafsdfsa" 0 9 (ivy-index 0)) #("dsafsda" 0 7 (ivy-index 0)) #("sss" 0 3 (ivy-index 0)) #("dasf" 0 4 (ivy-index 0)) #("img/" 0 4 (ivy-index 0)) #("recipe/* " 0 9 (ivy-index 0)) "recipe/img/" #(" " 0 1 (ivy-index 0)) "phd.org\\~" #("bean-check.exe main.bean" 0 24 (ivy-index 0)) #("Equity.bean" 0 11 (ivy-index 5)) #("bean-check" 0 10 (ivy-index 0)) "bean-check.exe" #("Assets.bean" 0 11 (ivy-index 1)) #("*eshell*" 0 8 (ivy-index 3)) #("tasks.org" 0 9 (ivy-index 2)) #("breakfast.org" 0 13 (ivy-index 4)) #("index.org" 0 9 (ivy-index 3)) #("Masked Autoencoders Are Scalable Vision Learners.org" 0 52 (ivy-index 3)) #("d:/research/LFRS/Literature/Masked Autoencoders Are Scalable Vision Learners.org" 0 80 (ivy-index 2)) #("0011.chat" 0 9 (ivy-index 1)) #("chat10.chat" 0 11 (ivy-index 3)) #("eaf-pdf-viewer" 0 14 (ivy-index 0)) #("0008.chat" 0 9 (ivy-index 6)) #("*lsp-bridge-epc con 4*" 0 22 (ivy-index 5)) #("ent@43.143.190.163:20022/home/ent/disky/data/waymo-motion/vectorizer.py" 0 71 (ivy-index 0)) #("habits.org" 0 10 (ivy-index 1)) #("*Org Agenda(a:2023-04-15)" 0 25 (ivy-index 0)) #("research" 0 8 (idx 0 ivy-index 0)) #("*scratch*" 0 9 (ivy-index 0)) #("chat04.chat" 0 11 (ivy-index 0)) #("vectorizer.py" 0 13 (ivy-index 7)) #("plink:ent@43.143.190.163#20022:/home/ent/disky/data/waymo-motion/vectorizer.py" 0 78 (ivy-index 0)) #("ssh:ent@43.143.190.163#20022:/home/ent/disky/data/waymo-motion/vectorizer.py" 0 76 (ivy-index 0)) #("plink:ent@43.143.190.163:20022/home/ent/.ssh/id_rsa" 0 51 (ivy-index 0)) #("plink:ent@43.143.190.163#20022/home/ent/.ssh/id_rsa" 0 51 (ivy-index 0)) #("ent@43.143.190.163:20022/home/ent/.ssh/id_rsa" 0 45 (ivy-index 0)) #("登录 - Google 帐号" 0 14 (ivy-index 4)) #("init-eaf.el" 0 11 (ivy-index 0)) #(".gitignore" 0 10 (ivy-index 0)) #("init-shell.el" 0 13 (ivy-index 0)) #("re" 0 2 (ivy-index 1)) "recentf-save.el" #("save-place.el" 0 13 (ivy-index 0)) #("emacs-rime/" 0 11 (ivy-index 0)) #("ent@43.143.190.163:20022:/home/ent/disky/data/waymo-motion/vectorizer.py" 0 72 (ivy-index 0)) #("ent@43.143.190.163:20022:/home/ent/.ssh/id_rsa" 0 46 (ivy-index 0)) #("Messages*" 0 9 (ivy-index 0)) #("ent@43.143.190.163#20022:/home/ent/disky/data/waymo-motion/vectorizer.py" 0 72 (ivy-index 0)) #("ent@43.143.190.163:[20022]/home/ent/disky/data/waymo-motion/vectorizer.py" 0 73 (ivy-index 0)) #("init.el" 0 7 (ivy-index 1))))
(setq swiper-history '(#("mind-wave" 0 9 (ivy-index 0)) #(" ** mind-wave" 0 1 (swiper-line-number 2503 display "2503 ") 1 2 (fontified t face org-level-2 display #("○" 0 1 (face org-modern-symbol))) 2 3 (fontified t face org-level-2 display #("○" 0 1 (face org-modern-symbol))) 3 4 (fontified t face org-level-2) 4 13 (fontified t face org-level-2)) #("proxy" 0 5 (ivy-index 2)) #(" (setq eaf-proxy-port \"7890\")" 0 1 (swiper-line-number 2423 display "2423 ") 1 2 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 2 6 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 6 22 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 22 28 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 28 29 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("markdown-mode" 0 13 (ivy-index 2)) #("   :bind (:map markdown-mode-map" 0 1 (swiper-line-number 2239 display "2239 ") 1 32 (fontified nil)) #("pass" 0 4 (ivy-index 2)) #(" ** pass 密码管理" 0 1 (display "2073 " swiper-line-number 2073) 1 13 (fontified nil)) #("org" 0 3 (ivy-index 166)) #("   (setq org-babel-default-header-args" 0 1 (display "1372 " swiper-line-number 1372) 1 38 (fontified nil)) #("prettified" 0 10 (ivy-index 0)) #(" (defun my/more-prettified-symbols ()" 0 1 (display "2310 " swiper-line-number 2310) 1 2 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 2 7 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 7 8 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 8 34 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (font-lock-function-name-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 34 35 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 35 36 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 36 37 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t font-lock-fontified t fontified t)) #("cnfonts" 0 7 (ivy-index 4)) #(" ;;   (cnfonts-enable))" 0 1 (swiper-line-number 175 display "175  ") 1 6 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 6 23 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("pretti" 0 6 (ivy-index 15)) #("   (mapc (lambda (pair) (cl-pushnew pair tex--prettify-symbols-alist))" 0 1 (swiper-line-number 2312 display "2312 ") 1 3 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 3 4 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 4 9 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 9 10 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 10 16 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 16 17 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 17 18 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 18 22 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 22 23 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 23 24 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 24 25 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 25 35 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 35 68 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 68 69 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 69 70 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("     (defun my/org-prettify-symbols ()" 0 1 (swiper-line-number 964 display "964  ") 1 5 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 5 6 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 6 11 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 11 12 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 12 35 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 35 36 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 36 37 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 37 38 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("fonts" 0 5 (ivy-index 16)) #(" ;; 默认字体和字号 @ https://fonts.google.com/specimen/Fira+Mono" 0 1 (swiper-line-number 180 display "180  ") 1 4 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 4 14 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 14 56 (fontified t help-echo nil htmlize-link (:uri "https://fonts.google.com/specimen/Fira+Mono") font-lock-fontified t src-block t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face (font-lock-comment-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 56 57 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) help-echo nil htmlize-link (:uri "https://fonts.google.com/specimen/Fira+Mono") font-lock-fontified t src-block t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) font-lock-multiline t face (font-lock-comment-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #(" ;; 默认字体和字号 @ https://fonts.google.com/specimen/Fira+Mono" 0 1 (swiper-line-number 180 display "180  ") 1 57 (fontified nil)) #("fira" 0 4 (ivy-index 3)) #(" (set-face-attribute 'default nil :font \"Fira Mono\" :height 160)" 0 1 (display "2333 " swiper-line-number 2333) 1 63 (fontified t src-block t font-lock-fontified t) 63 64 (rear-nonsticky t fontified t src-block t font-lock-fontified t)) #(" (defun my/more-prettified-symbols ()" 0 1 (display "2313 " swiper-line-number 2313) 1 2 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 2 7 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 7 8 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 8 34 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (font-lock-function-name-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 34 35 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 35 36 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 36 37 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t font-lock-fontified t fontified t)) #("cn-fonts" 0 8 (ivy-index 0)) #(" *** cn-fonts" 0 1 (swiper-line-number 151 display "151  ") 1 3 (fontified t face org-level-3 display #("✸" 0 1 (face org-modern-symbol))) 3 4 (fontified t face org-level-3 display #("✸" 0 1 (face org-modern-symbol))) 4 5 (fontified t face org-level-3) 5 13 (fontified t face org-level-3)) #("字体" 0 2 (ivy-index 2)) #("       ;; 默认字体和字号" 0 1 (swiper-line-number 182 display "182  ") 1 17 (fontified nil)) #(" - Windows所使用的编码方式与Manjaro不同，导致中文字体无法正确显示" 0 1 (swiper-line-number 327 display "327  ") 1 41 (fontified nil)) #("simkai" 0 6 (ivy-index 0)) #("       (set-fontset-font \"fontset-default\" 'han \"SimKai\")" 0 1 (display "189  " swiper-line-number 189) 1 7 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 7 8 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-3-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 8 25 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 25 42 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 42 48 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 48 56 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 56 57 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-3-face org-block) font-lock-multiline t font-lock-fontified t fontified t)) #("Kaiti" 0 5 (ivy-index 0)) #("       (set-fontset-font \"fontset-default\" 'han \"Kaiti\")" 0 1 (display "189  " swiper-line-number 189) 1 56 (fontified nil)) #(" ;; 可变间距字体" 0 1 (swiper-line-number 198 display "198  ") 1 10 (fontified nil)) #("数学" 0 2 (ivy-index 1)) #(" ;; 保证 Unicode 数学符号可以正确显示" 0 1 (swiper-line-number 2274 display "2274 ") 1 4 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 4 25 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("all-the-icons" 0 13 (ivy-index 15)) #("   (require 'all-the-icons))" 0 1 (swiper-line-number 2092 display "2092 ") 1 3 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 3 4 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 4 11 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 11 13 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 13 26 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 26 27 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 27 28 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #(" ;; depend on all-the-icons" 0 1 (display "2094 " swiper-line-number 2094) 1 4 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (font-lock-comment-delimiter-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 4 27 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (font-lock-comment-face org-block) font-lock-multiline t font-lock-fontified t fontified t)) #(" ** cn-fonts 中文字体配置" 0 1 (display "151  " swiper-line-number 151) 1 2 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 2 3 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 3 4 (face org-level-2 fontified t) 4 19 (face org-level-2 fontified t)) #(" ;; 保证 Unicode 数学符号可以正确显示" 0 1 (display "2264 " swiper-line-number 2264) 1 4 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) face (font-lock-comment-delimiter-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 4 25 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) face (font-lock-comment-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #(" (my/more-prettified-symbols) ;; 读入自定义 prettify 符号" 0 1 (swiper-line-number 2293 display "2293 ") 1 2 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 2 28 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 28 29 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 29 30 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 30 33 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 33 50 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("emacs-rime" 0 10 (ivy-index 0)) #(" ** emacs-rime" 0 1 (display "1978 " swiper-line-number 1978) 1 2 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 2 3 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 3 4 (face org-level-2 fontified t) 4 14 (face org-level-2 fontified t)) #("add-to-list" 0 11 (ivy-index 10)) #(" (add-to-list 'load-path \"~/.emacs.d/lisp/\")" 0 1 (display "2020 " swiper-line-number 2020) 1 2 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 2 24 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 24 25 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 25 43 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 43 44 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t font-lock-fontified t fontified t)) #("load-path" 0 9 (ivy-index 7)) #(" (add-to-list 'load-path \"~/.emacs.d/mind-wave/\")" 0 1 (display "2422 " swiper-line-number 2422) 1 2 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 2 25 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 25 48 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (font-lock-string-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 48 49 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t font-lock-fontified t fontified t)) #("posframe" 0 8 (ivy-index 2)) #(" (use-package posframe" 0 1 (display "1926 " swiper-line-number 1926) 1 22 (fontified nil)) #("rss-reader" 0 10 (ivy-index 0)) #(" ** eaf-rss-reader" 0 1 (swiper-line-number 2388 display "2388 ") 1 18 (fontified nil)) #("setq package-" 0 13 (ivy-index 8)) #(" (setq package-check-signature nil)" 0 1 (display "592  " swiper-line-number 592) 1 2 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 2 6 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 6 34 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 34 35 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t font-lock-fontified t fontified t)) #("pdf-tools" 0 9 (ivy-index 4)) #(" ;; pdf-tools" 0 1 (display "2287 " swiper-line-number 2287) 1 13 (fontified nil)) #("undo-tree" 0 9 (ivy-index 1)) #(" ** undo-tree撤销设置" 0 1 (swiper-line-number 589 display "589  ") 1 17 (fontified nil)) #("   pdf-tools                      1.0.0          available    nongnu   Support library for PDF documents" 0 1 (display "8044  " swiper-line-number 8044) 1 3 (tabulated-list-entry [("pdf-tools" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) action package-menu-describe-package) #("1.0.0" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("nongnu" 0 6 (font-lock-face package-status-available)) #("Support library for PDF documents" 0 33 (font-lock-face package-description))] tabulated-list-id #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil)) 3 12 (tabulated-list-entry [("pdf-tools" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) action package-menu-describe-package) #("1.0.0" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("nongnu" 0 6 (font-lock-face package-status-available)) #("Support library for PDF documents" 0 33 (font-lock-face package-description))] tabulated-list-id #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) tabulated-list-column-name "Package" action package-menu-describe-package package-desc #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) follow-link t font-lock-face package-name face package-name category default-button button (t)) 12 13 (tabulated-list-entry [("pdf-tools" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) action package-menu-describe-package) #("1.0.0" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("nongnu" 0 6 (font-lock-face package-status-available)) #("Support library for PDF documents" 0 33 (font-lock-face package-description))] tabulated-list-id #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) tabulated-list-column-name "Package") 13 34 (tabulated-list-entry [("pdf-tools" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) action package-menu-describe-package) #("1.0.0" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("nongnu" 0 6 (font-lock-face package-status-available)) #("Support library for PDF documents" 0 33 (font-lock-face package-description))] tabulated-list-id #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) tabulated-list-column-name "Package" display (space :align-to 33)) 34 39 (tabulated-list-entry [("pdf-tools" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) action package-menu-describe-package) #("1.0.0" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("nongnu" 0 6 (font-lock-face package-status-available)) #("Support library for PDF documents" 0 33 (font-lock-face package-description))] tabulated-list-id #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) tabulated-list-column-name "Version" help-echo #("Version: 1.0.0" 9 14 (font-lock-face package-status-available)) font-lock-face package-status-available) 39 40 (tabulated-list-entry [("pdf-tools" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) action package-menu-describe-package) #("1.0.0" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("nongnu" 0 6 (font-lock-face package-status-available)) #("Support library for PDF documents" 0 33 (font-lock-face package-description))] tabulated-list-id #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) tabulated-list-column-name "Version") 40 49 (tabulated-list-entry [("pdf-tools" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) action package-menu-describe-package) #("1.0.0" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("nongnu" 0 6 (font-lock-face package-status-available)) #("Support library for PDF documents" 0 33 (font-lock-face package-description))] tabulated-list-id #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) tabulated-list-column-name "Version" display (space :align-to 48)) 49 58 (tabulated-list-entry [("pdf-tools" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) action package-menu-describe-package) #("1.0.0" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("nongnu" 0 6 (font-lock-face package-status-available)) #("Support library for PDF documents" 0 33 (font-lock-face package-description))] tabulated-list-id #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) tabulated-list-column-name "Status" help-echo #("Status: available" 8 17 (font-lock-face package-status-available)) font-lock-face package-status-available) 58 59 (tabulated-list-entry [("pdf-tools" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) action package-menu-describe-package) #("1.0.0" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("nongnu" 0 6 (font-lock-face package-status-available)) #("Support library for PDF documents" 0 33 (font-lock-face package-description))] tabulated-list-id #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) tabulated-list-column-name "Status") 59 62 (tabulated-list-entry [("pdf-tools" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) action package-menu-describe-package) #("1.0.0" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("nongnu" 0 6 (font-lock-face package-status-available)) #("Support library for PDF documents" 0 33 (font-lock-face package-description))] tabulated-list-id #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) tabulated-list-column-name "Status" display (space :align-to 61)) 62 68 (tabulated-list-entry [("pdf-tools" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) action package-menu-describe-package) #("1.0.0" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("nongnu" 0 6 (font-lock-face package-status-available)) #("Support library for PDF documents" 0 33 (font-lock-face package-description))] tabulated-list-id #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) tabulated-list-column-name "Archive" help-echo #("Archive: nongnu" 9 15 (font-lock-face package-status-available)) font-lock-face package-status-available) 68 69 (tabulated-list-entry [("pdf-tools" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) action package-menu-describe-package) #("1.0.0" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("nongnu" 0 6 (font-lock-face package-status-available)) #("Support library for PDF documents" 0 33 (font-lock-face package-description))] tabulated-list-id #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) tabulated-list-column-name "Archive") 69 71 (tabulated-list-entry [("pdf-tools" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) action package-menu-describe-package) #("1.0.0" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("nongnu" 0 6 (font-lock-face package-status-available)) #("Support library for PDF documents" 0 33 (font-lock-face package-description))] tabulated-list-id #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) tabulated-list-column-name "Archive" display (space :align-to 70)) 71 104 (tabulated-list-entry [("pdf-tools" face package-name font-lock-face package-name follow-link t package-desc #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) action package-menu-describe-package) #("1.0.0" 0 5 (font-lock-face package-status-available)) #("available" 0 9 (font-lock-face package-status-available)) #("nongnu" 0 6 (font-lock-face package-status-available)) #("Support library for PDF documents" 0 33 (font-lock-face package-description))] tabulated-list-id #s(package-desc pdf-tools (1 0 0) "Support library for PDF documents" ((emacs (26 3)) (tablist (1 0)) (let-alist (1 0 4))) tar "nongnu" nil ((:url . "http://github.com/vedang/pdf-tools/") (:keywords "files" "multimedia") (:maintainer "Vedang Manerikar" . "vedang.manerikar@gmail.com") (:authors ("Andreas Politz" . "mail@andreas-politz.de")) (:commit . "96703b2bb5c937afd05778086c43280b0593fe99")) nil) tabulated-list-column-name "Description" help-echo #("Description: Support library for PDF documents" 13 46 (font-lock-face package-description)) font-lock-face package-description)) #("set-face-attribute" 0 18 (ivy-index 2)) #(" # (set-face-attribute 'variable-pitch nil :font \"Segoe Print\" :height 160 :weight 'regular) ;; 可变间距字体" 0 1 (display "188  " swiper-line-number 188) 1 10 (face font-lock-comment-face font-lock-fontified t fontified t) 10 102 (face font-lock-comment-face font-lock-fontified t fontified t)) #(" # (set-face-attribute 'variable-pitch nil :font \"Segoe Print\" :height 160 :weight 'regular) ;; 可变间距字体" 0 1 (display "188  " swiper-line-number 188) 1 102 (fontified nil)) #("swi" 0 3 (ivy-index 0)) #("   ((\"C-s\" . 'swiper)" 0 1 (display "645  " swiper-line-number 645) 1 21 (fontified nil)) #("   (cnfonts-enable))" 0 1 (display "175  " swiper-line-number 175) 1 3 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 3 4 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 4 18 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 18 19 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 19 20 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t font-lock-fontified t fontified t)) #("more-pretti" 0 11 (ivy-index 0)) #(" (defun my/more-prettified-symbols ()" 0 1 (swiper-line-number 2253 display "2253 ") 1 2 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 2 7 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 7 8 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 8 34 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-function-name-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 34 35 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 35 36 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 36 37 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("ivy" 0 3 (ivy-index 0)) #(" ** ivy增强" 0 1 (swiper-line-number 629 display "629  ") 1 9 (fontified nil)) #("set-fontset-font \"font" 0 22 (ivy-index 3)) #(" (set-fontset-font \"fontset-default\" 'mathematical \"Cambria Math\")" 0 1 (swiper-line-number 2224 display "2224 ") 1 2 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 2 19 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 19 36 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 36 51 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 51 65 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 65 66 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("prettify-sym" 0 12 (ivy-index 7)) #("   (prettify-symbols-mode t) ;; 加载prettify-symbols-mode" 0 1 (swiper-line-number 2218 display "2218 ") 1 3 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 3 4 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 4 27 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 27 28 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 28 29 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 29 32 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 32 55 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("auto-save" 0 9 (ivy-index 3)) #(" ;; auto-save @" 0 1 (display "602  " swiper-line-number 602) 1 15 (fontified nil)) #(" ;; pdf-tools" 0 1 (swiper-line-number 2257 display "2257 ") 1 13 (fontified nil)) #(" ;;; linum-mode与pdf-view不兼容，在pdf-tools启用时禁用linum-mode" 0 1 (swiper-line-number 311 display "311  ") 1 53 (fontified nil)) #(" ** cn-fonts 中文字体配置" 0 1 (display "150  " swiper-line-number 150) 1 2 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 2 3 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 3 4 (face org-level-2 fontified t) 4 19 (face org-level-2 fontified t)) #(" ** cn-fonts 中文字体配置" 0 1 (display "150  " swiper-line-number 150) 1 2 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 2 3 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 3 4 (face org-level-2 fontified t) 4 19 (face org-level-2 fontified t)) #("use-package org" 0 15 (ivy-index 0)) #("   (use-package org" 0 1 (display "905  " swiper-line-number 905) 1 19 (fontified nil)) "org-" #("org-block-end-line" 0 18 (ivy-index 0)) #("     (org-block-end-line ((t (:overline t :underline nil :background unspecified))))" 0 1 (swiper-line-number 926 display "926  ") 1 5 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 5 6 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 6 25 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 25 26 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 26 27 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 27 29 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 29 30 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-5-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 30 39 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 39 42 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 42 52 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 52 57 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 57 68 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-builtin-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 68 80 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 80 81 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-5-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 81 82 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-4-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 82 83 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-3-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 83 84 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) "org-faces" "org-format-latex-opt" #("org-ellips" 0 10 (ivy-index 0)) #("     (org-ellipsis \" ▾\")" 0 1 (swiper-line-number 1018 display "1018 ") 1 5 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 5 6 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 6 19 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 19 23 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 23 24 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("org-startup-folded" 0 18 (ivy-index 0)) #("     (org-startup-folded 'overview)" 0 1 (swiper-line-number 1050 display "1050 ") 1 5 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 5 6 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 6 34 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 34 35 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("org-hide-emp" 0 12 (ivy-index 0)) #("     (org-hide-emphasis-markers t)" 0 1 (swiper-line-number 1030 display "1030 ") 1 5 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 5 6 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 6 33 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 33 34 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #(" (pdf-tools-install)" 0 1 (swiper-line-number 2265 display "2265 ") 1 20 (fontified nil)) #("   (use-package org" 0 1 (display "905  " swiper-line-number 905) 1 19 (fontified nil)) #("   (setq undo-tree-auto-save-history nil)" 0 1 (display "596  " swiper-line-number 596) 1 41 (fontified nil)) #("org-download" 0 12 (ivy-index 1)) #(" (use-package org-download" 0 1 (display "2285 " swiper-line-number 2285) 1 26 (fontified nil)) #("   (use-package org" 0 1 (swiper-line-number 905 display "905  ") 1 3 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 3 4 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 4 15 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 15 16 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 16 19 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("add-hook 'org-mode-hook" 0 23 (ivy-index 0)) #(" (add-hook 'org-mode-hook #'org-cdlatex-mode) ;; 打开 cdlatex" 0 1 (swiper-line-number 2295 display "2295 ") 1 2 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 2 44 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 44 45 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 45 46 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 46 49 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 49 59 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("   (use-package org" 0 1 (swiper-line-number 905 display "905  ") 1 3 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 3 4 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 4 15 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-keyword-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 15 16 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 16 19 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-constant-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("org-noter" 0 9 (ivy-index 0)) #(" ** org-noter" 0 1 (swiper-line-number 2292 display "2292 ") 1 13 (fontified nil)) #(" ** cn-fonts 中文字体配置" 0 1 (swiper-line-number 150 display "150  ") 1 2 (fontified t face org-level-2 display #("○" 0 1 (face org-modern-symbol))) 2 3 (fontified t face org-level-2 display #("○" 0 1 (face org-modern-symbol))) 3 4 (fontified t face org-level-2) 4 19 (fontified t face org-level-2)) "pd-tools" #("marginalia" 0 10 (ivy-index 0)) #(" ** marginalia" 0 1 (display "1865 " swiper-line-number 1865) 1 2 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 2 3 (display #("○" 0 1 (face org-modern-symbol)) face org-level-2 fontified t) 3 4 (face org-level-2 fontified t) 4 14 (face org-level-2 fontified t)) "orderless" #(" ;;; linum-mode与pdf-view不兼容，在pdf-tools启用时禁用linum-mode" 0 1 (display "311  " swiper-line-number 311) 1 5 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (font-lock-comment-delimiter-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 5 53 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (font-lock-comment-face org-block) font-lock-multiline t font-lock-fontified t fontified t)) "global-dis" "visual-line-mode 1" #("column-number-mode" 0 18 (ivy-index 0)) #(" (column-number-mode t)" 0 1 (display "306  " swiper-line-number 306) 1 23 (fontified nil)) #("font" 0 4 (ivy-index 0)) #(" ** cn-fonts 中文字体配置" 0 1 (swiper-line-number 150 display "150  ") 1 2 (fontified t face org-level-2 display #("○" 0 1 (face org-modern-symbol))) 2 3 (fontified t face org-level-2 display #("○" 0 1 (face org-modern-symbol))) 3 4 (fontified t face org-level-2) 4 19 (fontified t face org-level-2)) #("beancount" 0 9 (ivy-index 2)) #(" (add-to-list 'auto-mode-alist '(\"\\\\.bean\\\\'\" . beancount-mode))" 0 1 (swiper-line-number 1966 display "1966 ") 1 2 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 2 32 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 32 33 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 33 45 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 45 62 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 62 63 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 63 64 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #(" (add-hook 'beancount-mode-hook" 0 1 (display "1967 " swiper-line-number 1967) 1 2 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 2 31 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t)) "lsp" #("lsp-bridge" 0 10 (ivy-index 0)) #(" ** lsp-bridge" 0 1 (swiper-line-number 1877 display "1877 ") 1 14 (fontified nil)) #(" ;;lsp-bridge" 0 1 (swiper-line-number 44 display "44 ") 1 3 (fontified t face font-lock-comment-delimiter-face) 3 13 (fontified t face font-lock-comment-face)) #(" + [[https://github.com/manateelazycat/auto-save][auto-save]] 是 [[https://manateelazycat.github.io/][manateeLazyCat]] 开发的自动保存插件" 0 1 (swiper-line-number 587 display "587  ") 1 2 (fontified t display "◦") 2 3 (fontified t) 3 49 (fontified t invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://github.com/manateelazycat/auto-save" htmlize-link (:uri "https://github.com/manateelazycat/auto-save") font-lock-multiline t face org-link) 49 50 (fontified t invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://github.com/manateelazycat/auto-save" htmlize-link (:uri "https://github.com/manateelazycat/auto-save") font-lock-multiline t face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 50 58 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://github.com/manateelazycat/auto-save" htmlize-link (:uri "https://github.com/manateelazycat/auto-save") font-lock-multiline t) 58 59 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://github.com/manateelazycat/auto-save" htmlize-link (:uri "https://github.com/manateelazycat/auto-save") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 59 60 (fontified t face org-link invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://github.com/manateelazycat/auto-save" htmlize-link (:uri "https://github.com/manateelazycat/auto-save") font-lock-multiline t) 60 61 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://github.com/manateelazycat/auto-save" htmlize-link (:uri "https://github.com/manateelazycat/auto-save") font-lock-multiline t) 61 64 (fontified t) 64 100 (fontified t invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://manateelazycat.github.io/" htmlize-link (:uri "https://manateelazycat.github.io/") font-lock-multiline t face org-link) 100 101 (fontified t invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://manateelazycat.github.io/" htmlize-link (:uri "https://manateelazycat.github.io/") font-lock-multiline t face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 101 114 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://manateelazycat.github.io/" htmlize-link (:uri "https://manateelazycat.github.io/") font-lock-multiline t) 114 115 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://manateelazycat.github.io/" htmlize-link (:uri "https://manateelazycat.github.io/") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 115 116 (fontified t face org-link invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://manateelazycat.github.io/" htmlize-link (:uri "https://manateelazycat.github.io/") font-lock-multiline t) 116 117 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://manateelazycat.github.io/" htmlize-link (:uri "https://manateelazycat.github.io/") font-lock-multiline t) 117 127 (fontified t)) #("pyim" 0 4 (ivy-index 0)) #(" ** pyim 输入法" 0 1 (swiper-line-number 1962 display "1962 ") 1 12 (fontified nil)) #(" + [[https://github.com/manateelazycat/auto-save][auto-save]] 是 [[https://manateelazycat.github.io/][manateeLazyCat]] 开发的自动保存插件" 0 1 (swiper-line-number 587 display "587  ") 1 2 (fontified t display "◦") 2 3 (fontified t) 3 49 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://github.com/manateelazycat/auto-save" htmlize-link (:uri "https://github.com/manateelazycat/auto-save") font-lock-multiline t face org-link) 49 50 (fontified t mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://github.com/manateelazycat/auto-save" htmlize-link (:uri "https://github.com/manateelazycat/auto-save") font-lock-multiline t face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 50 58 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://github.com/manateelazycat/auto-save" htmlize-link (:uri "https://github.com/manateelazycat/auto-save") font-lock-multiline t) 58 59 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://github.com/manateelazycat/auto-save" htmlize-link (:uri "https://github.com/manateelazycat/auto-save") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 59 60 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://github.com/manateelazycat/auto-save" htmlize-link (:uri "https://github.com/manateelazycat/auto-save") font-lock-multiline t) 60 61 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://github.com/manateelazycat/auto-save" htmlize-link (:uri "https://github.com/manateelazycat/auto-save") font-lock-multiline t) 61 64 (fontified t) 64 100 (fontified t invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://manateelazycat.github.io/" htmlize-link (:uri "https://manateelazycat.github.io/") font-lock-multiline t face org-link) 100 101 (fontified t invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://manateelazycat.github.io/" htmlize-link (:uri "https://manateelazycat.github.io/") font-lock-multiline t face org-link rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 101 114 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://manateelazycat.github.io/" htmlize-link (:uri "https://manateelazycat.github.io/") font-lock-multiline t) 114 115 (fontified t face org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://manateelazycat.github.io/" htmlize-link (:uri "https://manateelazycat.github.io/") font-lock-multiline t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)) 115 116 (fontified t face org-link invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://manateelazycat.github.io/" htmlize-link (:uri "https://manateelazycat.github.io/") font-lock-multiline t) 116 117 (fontified t rear-nonsticky (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link) face org-link invisible org-link mouse-face highlight keymap (keymap (follow-link . mouse-face) (mouse-3 . org-find-file-at-mouse) (mouse-2 . org-open-at-mouse)) help-echo "LINK: https://manateelazycat.github.io/" htmlize-link (:uri "https://manateelazycat.github.io/") font-lock-multiline t) 117 127 (fontified t)) #(" + [[https://github.com/manateelazycat/auto-save][auto-save]] 是 [[https://manateelazycat.github.io/][manateeLazyCat]] 开发的自动保存插件" 0 1 (swiper-line-number 587 display "587  ") 1 127 (fontified nil)) #("seg" 0 3 (ivy-index 0)) #("                                 (\"Noto Emoji\" \"Sarasa Term SC Nerd\" \"Segoe UI Symbol\" \"PragmataPro Mono Liga\")))" 0 1 (display "173  " swiper-line-number 173) 1 33 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 33 34 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) face (rainbow-delimiters-depth-4-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 34 46 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 46 47 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 47 68 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 68 69 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 69 86 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 86 87 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) face (org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 87 110 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) face (font-lock-string-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 110 111 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) face (rainbow-delimiters-depth-4-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 111 112 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) face (rainbow-delimiters-depth-3-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t) 112 113 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t src-block t help-echo nil font-lock-fontified t fontified t)) #("sarasa" 0 6 (ivy-index 2)) #("                    ((member \"Sarasa Mono SC Nerd\" (font-family-list)) \"Sarasa Mono SC Nerd\")" 0 1 (swiper-line-number 241 display "241  ") 1 20 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 20 21 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-8-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 21 22 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-9-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 22 29 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 29 50 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 50 51 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 51 52 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 52 68 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 68 69 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 69 70 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-9-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 70 71 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 71 92 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-string-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 92 93 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-8-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) "org-capture" "clock" #("   (cnfonts-enable))" 0 1 (swiper-line-number 175 display "175  ") 1 3 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 3 4 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 4 18 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 18 19 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 19 20 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) "all-the-icons-comple" #("all-the-icons-completion" 0 24 (ivy-index 0)) #(" ** all-the-icons-completion" 0 1 (swiper-line-number 1836 display "1836 ") 1 2 (fontified t face org-level-2 display #("○" 0 1 (face org-modern-symbol))) 2 3 (fontified t face org-level-2 display #("○" 0 1 (face org-modern-symbol))) 3 4 (fontified t face org-level-2) 4 14 (fontified t face org-level-2) 14 28 (fontified t face org-level-2)) #("dirvish" 0 7 (ivy-index 1)) #(" ** dirvish 文件管理增强" 0 1 (display "800  " swiper-line-number 800) 1 18 (fontified nil)) #(" ;; depend on all-the-icons" 0 1 (swiper-line-number 1796 display "1796 ") 1 4 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 4 27 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("pdf-tools-install" 0 17 (ivy-index 0)) #(" (pdf-tools-install)" 0 1 (swiper-line-number 2020 display "2020 ") 1 2 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 2 19 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 19 20 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #(" (use-package markdown-mode" 0 1 (swiper-line-number 1916 display "1916 ") 1 2 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 2 13 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 13 14 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 14 27 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("projectile" 0 10 (ivy-index 3)) #(" (use-package projectile" 0 1 (swiper-line-number 1774 display "1774 ") 1 2 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 2 13 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 13 14 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 14 24 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #(" (use-package markdown-mode" 0 1 (swiper-line-number 1916 display "1916 ") 1 2 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 2 13 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 13 14 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 14 27 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #(" ** markdown-mode 设置" 0 1 (swiper-line-number 1914 display "1914 ") 1 2 (fontified t face org-level-2 display #("○" 0 1 (face org-modern-symbol))) 2 3 (fontified t face org-level-2 display #("○" 0 1 (face org-modern-symbol))) 3 4 (fontified t face org-level-2) 4 20 (fontified t face org-level-2)) #(" ;; auto-save @" 0 1 (swiper-line-number 562 display "562  ") 1 4 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 4 15 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-comment-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #(" ** undo-tree撤销设置" 0 1 (swiper-line-number 549 display "549  ") 1 17 (fontified nil)) #(" (require 'lsp-bridge)" 0 1 (swiper-line-number 1667 display "1667 ") 1 2 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 2 9 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 9 11 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 11 21 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 21 22 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #(" (setq lsp-bridge-python-lsp-server \"pyright\")" 0 1 (swiper-line-number 1669 display "1669 ") 1 2 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 2 6 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 6 36 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 36 45 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-string-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 45 46 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("yasnippet" 0 9 (ivy-index 2)) #("   (use-package yasnippet" 0 1 (swiper-line-number 1623 display "1623 ") 1 3 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 3 4 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-1-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 4 15 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-keyword-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 15 16 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 16 25 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-constant-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #("   :bind (:map markdown-mode-map" 0 1 (swiper-line-number 1920 display "1920 ") 1 3 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 3 8 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-builtin-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 8 9 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 9 10 (fontified t font-lock-fontified t font-lock-multiline t face (rainbow-delimiters-depth-2-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 10 14 (fontified t font-lock-fontified t font-lock-multiline t face (font-lock-builtin-face org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 14 32 (fontified t font-lock-fontified t font-lock-multiline t face (org-block) help-echo nil src-block t wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) #(" (use-package posframe" 0 1 (swiper-line-number 1658 display "1658 ") 1 22 (fontified nil)) #("always" 0 6 (ivy-index 0)) #("   (setq use-package-always-ensure nil)" 0 1 (display "83   " swiper-line-number 83) 1 3 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 3 4 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 4 8 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 8 38 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 38 39 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-2-face org-block) font-lock-multiline t font-lock-fontified t fontified t)) #("use-package" 0 11 (ivy-index 0)) #(" ** 安装use-package插件" 0 1 (display "74   " swiper-line-number 74) 1 19 (fontified nil)) "gc-cons" #("gc-" 0 3 (ivy-index 1)) #("   (setq gc-cons-percentage 0.6)" 0 1 (display "21   " swiper-line-number 21) 1 3 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 3 4 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 4 8 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (font-lock-keyword-face org-block) font-lock-multiline t font-lock-fontified t fontified t) 8 31 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (org-block) font-lock-multiline t font-lock-fontified t fontified t) 31 32 (line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) src-block t help-echo nil face (rainbow-delimiters-depth-1-face org-block) font-lock-multiline t font-lock-fontified t fontified t)) #("all-the-i" 0 9 (ivy-index 0)) #(" ;; depend on all-the-icons" 0 1 (swiper-line-number 1554 display "1554 ") 1 4 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-delimiter-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line)))) 4 27 (fontified t font-lock-fontified t help-echo nil src-block t font-lock-multiline t face (font-lock-comment-face org-block) wrap-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))) line-prefix #(" " 0 1 (display (left-fringe org-modern--block-inner org-block-begin-line))))) "all-the-" #("use-package calendar" 0 20 (ivy-index 0)) #(" (use-package calendar" 0 1 (swiper-line-number 291 display "291 ") 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 22 (fontified t face font-lock-constant-face)) #("habit" 0 5 (ivy-index 2)) #(" (use-package org-habit" 0 1 (swiper-line-number 615 display "615 ") 1 2 (fontified t face (rainbow-delimiters-depth-1-face)) 2 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 23 (fontified t face font-lock-constant-face)) #("magit" 0 5 (ivy-index 0)) #(" ;; magit" 0 1 (swiper-line-number 669 display "669 ") 1 4 (fontified t face font-lock-comment-delimiter-face) 4 9 (fontified t face font-lock-comment-face)) #("which-key" 0 9 (ivy-index 1)) #(" (use-package which-key" 0 1 (swiper-line-number 118 display "118 ") 1 2 (fontified t) 2 10 (fontified t face font-lock-keyword-face) 10 13 (fontified t face font-lock-keyword-face) 13 14 (fontified t) 14 23 (fontified t face font-lock-constant-face))))
(setq minibuffer-history '("hi" "?" "hi" "hi, chatgpt" "hi" "hi, chat" "chatgpt, 你在听吗" "hi, chatgpt" "/." "hi" "hi, chat" "emacs-china.org" "bookmark" "openai.com" "www.google.com" "hi, chatgpt" "GitHub - emacs-eaf/eaf-browser: A modern, customizable and extensible browser in Emacs" "save" "https://www.google.com" "为emacs正确配置英文、中文、符号字体的正确方式？" "http://www.ruanyifeng.com/blog/atom.xml" "http://feeds.feedburner.com/ruanyifeng" "https://arxiv.org/rss/cs.CV" "https://sachachua.com/blog/feed/" "http://feeds.feedburner.com/ruanyifeng" "https://emacstalk.codeberg.page/podcast/index.xml" "http://feeds.feedburner.com/ruanyifeng" "https://www.bmpi.dev/index.xml" "https://remacs.cc/index.xml" "http://blindwith.science/index.xml" "https://superliooon.com/feed/" "https://superlioon.com/feed/" "https://superlioon.com/feed" "https://manateelazycat.github.io/feed.xml" "TeX-pdf-tools-sync-view" "为什么这里有(x_t,y_t)的形式呢，我不明白这里的y_t是什么？" "请你理解一下这段话：Agent history encoding. The agent history encoding is obtained by concatenating the output of three sources:
1. A LSTM on the history features from H time steps ago to the present time: (xt , yt )t=−H:0 .
2. A LSTM on the difference in the history features (xt − xt−1 , yt − yt−1 )t=−H+1:0 .
3. MCG blocks applied to the set of history elements. Each element in the set consists of a historical position and
time offset in seconds relative to the present time. The context input here is an all-ones vector with an identity" "AV-relative features: Similar to the interaction features, we extract features of the autonomous vehicle / sensing
vehicle (AV) relative to each other agent. We model the AV separately from the other agents. We hypothesize
this is a helpful distinction for the model because: (a) The AV is the center of sensors’ field of view. Tracking
errors due to distance and occlusion are relative to this center. (b) The behavior of the AV can be unlike the
other road users, which to a good approximation can be assumed to all be humans. 这段话该怎么理解？" "在实际操作中，曲线的道路使用采样点来进行表示。这一篇工作则对采集到底的点进行进一步处理。将他们转换为一组线段。" "We further summarize this
information by approximating point sequences for each road element as a set of piecewise linear segments, or
polylines, similar to [20, 26, 32]. 这句话如何理解？" "就是说这些曲线是通过采样的方式进行描述的对吗？" "Road network: Road network elements such as lane lines, cross walks, and stop lines are often represented as
parametric curves like clothoids [52], which can be sampled to produce point collections that are easily stored
in multi-dimensional array format, as is done in many public datasets 这段话如何理解？" "Road network elements such as lane lines, cross walks, and stop lines are often represented as parametric curves like clothoids. 请问这里怎么理解？" "我本科毕业于清华电子系。这是一个比较强的院系。但入学前和入学后，自己浪费过许多时间。本科毕业后选择了直博。如今已经是25周岁了。但是与世俗意义上的成功越来越远。是不是这种追求是错误的，最好还是想明白自己要干什么，并且为此持续努力。" "chatgpt你好，我有点抑郁了，能和你聊聊天吗" "GMMs are a popular choice for this purpose due to their compact parameterized form，请问这里所说的compact parameterized form是什么东西？" "intrinsic property是什么" "intrisic property是指什么？" "请问这里的ramification是什么？" "The choice of output trajectory distribution has ramifications on downstream applications. An intrinsic property of
the driving setting is that a vehicle or a pedestrian can follow one of a diverse set of possible trajectories. It is thus
essential to capture the multimodal nature of the problem. Gaussian Mixture Models (GMMs) are a popular choice for
this purpose due to their compact parameterized form; mode collapse is addressed through training tricks [14, 50] or the
use of trajectory anchors [45]. Other approaches model a discrete distribution over a set of trajectories (learned or fixed
a priori) [2, 14, 32, 54], or via a collection of trajectory samples drawn from a latent distribution and decoded by the
model [1, 30, 33, 40, 41]. 请理解一下这句话" "Agent trajectory decoding choices are similar to choices for encoding motion history, with the exception of methods
that do lookup on a fixed or learned trajectory database [2, 37]. 这段话是在说什么内容？" "To model agent interactions, one must deal with a dynamic set of neighboring agents around each modeled agent.
This is typically done by aggregating neighbor motion history with a permutation-invariant set operator: pooling or
soft attention. Notably, Precog [41] jointly rolls out agent policies in a step-wise simulation. Raster approaches rely
on convolution over the 2D spatial grid to implicitly capture interactions; long-term interactions are dependent on the
network receptive fields. 这里所说的jointly roll out agent policies是什么东西？" "To model motion history, one popular choice is to encode the sequence of past observed states via a recurrent net
(GRU, LSTM) or temporal (1D) convolution. As an alternative, in the raster framework, the state sequence is typically
rendered as a stack of binary mask images depicting agent oriented bounding boxes, or rendered in the same image,
with the corresponding time information rendered separately 想知道在raster框架下，状态序列是如何表达的？" "将世界描述为一组折线，该如何表达车辆的运动状态呢？是不是车辆的运动状态并不应该用折现描述" "process a set-of-polylines description of the world in  这句话是不是说，将世界表示为一些折现，然后将其转化到agent-scentric 坐标系中？" "As an alternative,
the polyline approach describes curves (e.g., lanes, crosswalks, boundaries) as piecewise linear segments. This is
a significantly more compact form due to the sparse nature of road networks. Previous works typically process a
set-of-polylines description of the world in a per-agent, agent-centric coordinate system. LaneGCN [32] stands apart by
treating road lanes as nodes in a graph neural network, leveraging road network connectivity structure. 请你理解一下这段话？" "请问multi-channel image是如何对road configuration, agent state history, spatial relationships进行表示的？" "The raster approach encodes the world as a stack of images 这句话该如何翻译" "there is a dichotomy of representations, 这句话是什么意思" "如何翻译这句话：Table 2 is a summary of past work, which we go over here with additional context" "这句话该怎么翻译" "we go over here with additional context 是在说什么？" "应该是具体某一条轨迹的表现形式吧。而trajectory distribution则是说各条轨迹的分布" "可不可以将其理解为模型输出的表示形式？" "这里所说的intrinsic output representation是什么东西？" "A survey of recent work in behavior prediction, categorized by choice of road encoding, motion history
encoding, agent interaction encoding, trajectory decoding, intrinsic output representation, and distribution over future
trajectories. 可以理解一下这段话吗？" "什么是greedy iteractive clustering?" "model diverse outcomes with few trajectories and differ from pure trajectory distance error capturing the average agent behavior 该如何理解？" "可以给我介绍一下MR和mAP指标吗？" "这里所说的not in direct correspondence应该如何理解？" "可以请你用中文重新描述这段吗？" "Finally, we find significant additional gains on public benchmarks by applying ensembling techniques to our
models. Unlike models with static anchors, the latent anchors of a MultiPath++ ensemble are not in direct
correspondence. Furthermore, a lot of popular behavior prediction benchmarks have introduced metrics such
as miss-rate (MR) and mean Average Precision (mAP), which require the ability to model diverse outcomes
with few trajectories and differ from pure trajectory distance error capturing the average agent behavior. With
the above in mind, we formulate the problem of ensembling the results of several models as one of greedy
iterative clustering, which maximizes a probabilistic objective using the popular Expectation Maximization
algorithm" "在Multipath++这篇论文中，对轨迹的建模方式，有基于kinematic controls和polynomials as a function of continuous future time的。这两种方法我都不是很了解。" "我不是很理解这里所说的polynomials as a function of continuous future time, 想要知道这种方法是什么，以及这种方法如何用于trajectory modeling" "We also explore improvements in trajectory modeling, comparing representations based on kinematic controls,
and/or polynomials as a function of continuous future time" "请问在轨迹建模中，representations based on kinematic controls 是什么东西" "请问在轨迹建模中，representations based on kinematic controls 是什么东西？" "We also explore improvements in trajectory modeling, comparing representations based on kinematic controls,
and/or polynomials as a function of continuous future time. We further demonstrate a way to learn latent
representations of anchors and show they outperform the original static anchors of MultiPath, while simplifying
model creation to a single-step process. 这段话我不理解" "这里我可不可以将这种interaction理解为，将agent的状态转换到ego-agent的车辆坐标系。然后对这些状态用RNN进行建模。就下那个建模agent history一样。只不过这里将interaction用一种坐标变换表示了出来？" "将interaction表示为the state of neighbors relative to each ego-agent 合理吗？" "这里可以大致猜测一下怎么用RNN表达车辆的运动历史吗？" "We represent road elements as polylines, agent history as a sequence of
physical state encoded with RNNs, and agent interactions as RNNs over the state of neighbors relative to each
ego-agent." "在俯视图中，radial velocity应该是不存在的吧？我的意思是，即使不是俯视图，这种速度分量也是不存在的。" "这里所说的radial velocity是什么呢？" "这里认为卷积操作实现了interaction。这该怎么理解呢？" "栅格化能够保留的应该只有位置坐标，物体几何把。" "如果使用栅格化这种处理方式，那么有些状态应该是体现不出来的。比如速度之类的。" "是不是说spatial grid的分辨率越高越好。然而过高的分辨率将会导致卷积核过大。" "uneasy trade-off 该怎么理解呢？" "the heterogeneous world state is mapped to a common pixel format, 这里的heterogeneous world state和a common pixel format分别该怎么理解呢？" "leverage powerful, established CNN arhitectures， 这里的established该如何理解？" "这里的top-down orthographic view是什么？具体来说，orthographic又该怎么翻译呢" "请帮我翻译一下这段话：The MultiPath input representation and backbone draws heavily upon the computer vision literature. By rasterizing all
world state in a top-down orthographic view, MultiPath and others [10, 14, 27, 30, 33, 37, 46, 52] leverage powerful,
established CNN architectures like ResNet [25], which offer solutions to the heterogeneous interrelated input space: the
heterogeneous world state is mapped to a common pixel format, and interactions occur via local information sharing via
convolution operations. While convenient and established, there are downsides to such rasterization: (1) There is an
uneasy trade-off between resolution of the spatial grid, field of view, and compute requirements. (2) Rasterizing is a
form of manual feature engineering, and some features may be inherently difficult to represent in such a framework (e.g.
radial velocity). (3) It is difficult to capture long range interactions via convolutions with small receptive fields. (4)
The information content is spatially very sparse, making a dense representation a potentially computationally wasteful
choice." "得到了用np.savez_compressed()方法保存的.npz文件后，如何读取数据内容呢？" "我想在Python中使用断言进行debug。例如assert len(segments) == 3，我想在断言失效的时候输出一些debug信息，该怎么写" "我想在Python中使用断言进行debug。例如assert len(segments) == 3，我想在断言失效的时候输出一些debug信息，该怎么写？" "我遇到了 AssertionError: None 这个错误" "这段代码中使用的多线程方法用来创建任务，切分数据集，感觉是很标准的做法。" "apply_async是什么方法?" "我想请问apply_async是什么方法？" "是不是在第一个tqdm只是用来创建任务，第二个tqdm是任务实际开始执行？" "    p = multiprocessing.Pool(args.n_jobs)
    processes = []
    k = 0
    for data in tqdm(dataset.as_numpy_iterator()):
        k += 1
        data = tf.io.parse_single_example(data, generate_features_description())
        processes.append(
            p.apply_async(
                merge_and_save,
                kwds=dict(
                    visualizers=visualizers,
                    data=data,
                    output_path=args.output_path,
                ),
            )
        )

    for r in tqdm(processes):
        r.get()" "能不能帮我解释一下这段话?" "    p = multiprocessing.Pool(args.n_jobs)
    processes = []
    k = 0
    for data in tqdm(dataset.as_numpy_iterator()):
        k += 1
        data = tf.io.parse_single_example(data, generate_features_description())
        processes.append(
            p.apply_async(
                merge_and_save,
                kwds=dict(
                    visualizers=visualizers,
                    data=data,
                    output_path=args.output_path,
                ),
            )
        )

    for r in tqdm(processes):
        r.get()" "根据绘图结果来观察，感觉数据点是依次绘制的。这是plt.plot的特性吗？如果没有这么多点的话，就不能够画出来一个封闭的图形。" "能不能将plt.plot绘制的图片保存下来？" "能不能让我看看箭头框长什么样？" "定义一个框最多只需要四个点的坐标，为什么这里需要六组坐标？" "def plot_arrowbox(center, yaw, length, width, color, alpha=1):
    c, s = np.cos(yaw), np.sin(yaw)
    R = np.array(((c, -s), (s, c))).reshape(2, 2)
    box = np.array([
        [-length / 2, -width / 2],
        [-length / 2,  width / 2],
        [ length / 2,  width / 2],
        [ length * 1.3 / 2,  0],
        [ length / 2, -width / 2],
        [-length / 2, -width / 2]])
    box = box @ R.T + center
    plt.plot(box[:, 0], box[:, 1], color=color, alpha=alpha)" "这个函数的功能大致是要将segment进行绘制。但是只绘制散点的话，最终会有比较好的效果吗？" "这样的话只能看到起点，并不能绘制线段吧？" "def plot_roadlines(segments):
    plt.scatter(segments[:, 0, 0], segments[:, 0, 1], color=\"black\", s=0.1)" "如果多个visualizer所得到字典的键都一样，那么依据这里的实现，scene_data将会记录最后一个visualizer的结果。对吗？" "def merge_and_save(visualizers, data, output_path):
    data_to_numpy(data)
    preprocessed_dicts = [visualizer.render(data) for visualizer in visualizers]
    for scene_number in range(len(preprocessed_dicts[0])):
        scene_data = {}
        for visualizer_number in range(len(preprocessed_dicts)):
            scene_data.update(preprocessed_dicts[visualizer_number][scene_number])
        np.savez_compressed(os.path.join(output_path, generate_filename(scene_data)), **scene_data)" "你可以理解一下这段代码么？" "这样的话，对于字典scene_data, **scene_data是不是只取出了值并保存在文件中。而字典的KEY则被忽略掉了？" "这里面的scene_data是一个字典，其中的每一个值要么是numpy数组，要么是标量。这样的话，np.savez_compressed的用法奏效吗？" "np.savez_compressed(os.path.join(output_path, generate_filename(scene_data)), **scene_data)" "我想请教下，在python中，下面这段代码是什么含义" "Dawei Ma" "Emacs 上使用 Beancount 记账" "尝试使用 beancount 进行复式记账" "开始用 Beancount 实践复式记账（一）：初始化" "如何实现财富自由" "Beancount - 命令行式复式笔记" "beancount 简易入门指南" "记账神器 beancount" "使用 Beancount 管理家庭财务" "初意 - 尝试使用 Beancount 进行复式记账" "https://byvoid.com/zht/feed.xml" "Beyond the Void" "开始用 Beancount 实践复式记账（一）：初始化" "beancount简易入门指南" "Emacs Beancount: 记账时从其他的账户文件补全账户" "3x6" "优食志 - 燕麦粥" "Blind with Science - Beancount 记账小进阶之三-常见场景" "Blind with Science" "Blind with Science - Beancount 记账小进阶之一-环境配置" "Blind with Science - Emacs 上使用 Beancount 记账" "wzyboy's blog - 使用 Beancount 记录证券投资" "wzyboy's blog - Beancount 命令行复式簿记" "https://wzyboy.im/feed.xml" "    def _get_trajectory_class(self, data):
        valid = np.concatenate(
            [data[\"target/history/valid\"][0, -1:, 0], data[\"target/future/valid\"][0, :, 0]])
        future_xy = np.concatenate(
            [data[\"target/history/xy\"][0, -1:, :], data[\"target/future/xy\"][0, :, :]])
        future_yaw = np.concatenate(
            [data[\"target/history/yaw\"][0, -1:, 0], data[\"target/future/yaw\"][0, :, 0]])
        future_speed = np.concatenate(
            [data[\"target/history/speed\"][0, -1:, 0], data[\"target/future/speed\"][0, :, 0]])

        kMaxSpeedForStationary = 2.0                 # (m/s)
        kMaxDisplacementForStationary = 5.0          # (m)
        kMaxLateralDisplacementForStraight = 5.0     # (m)
        kMinLongitudinalDisplacementForUTurn = -5.0  # (m)
        kMaxAbsHeadingDiffForStraight = np.pi / 6.0   # (rad)
        first_valid_index, last_valid_index = 0, None
        for i in range(1, len(valid)):
            if valid[i] == 1:
                last_valid_index = i
        if valid[first_valid_index] == 0 or last_valid_index is None:
            return None

        xy_delta = future_xy[last_valid_index] - future_xy[first_valid_index]
        final_displacement = np.linalg.norm(xy_delta)
        heading_delta = future_yaw[last_valid_index] - future_yaw[first_valid_index]
        max_speed = max(future_speed[last_valid_index], future_speed[first_valid_index])

        if max_speed < kMaxSpeedForStationary and \\
                final_displacement < kMaxDisplacementForStationary:
            return \"stationary\"
        if np.abs(heading_delta) < kMaxAbsHeadingDiffForStraight:
            if np.abs(xy_delta[1]) < kMaxLateralDisplacementForStraight:
                return \"straight\"
            return \"straing_right\" if xy_delta[1] < 0 else \"straight_left\"
        if heading_delta < -kMaxAbsHeadingDiffForStraight and xy_delta[1]:
            return \"right_u_turn\" if xy_delta[0] < kMinLongitudinalDisplacementForUTurn \\
                else \"right_turn\"
        if xy_delta[0] < kMinLongitudinalDisplacementForUTurn:
            return \"left_u_turn\"
        return \"left_turn\"" "chatgpt, 请你帮我解读一下这段代码" "请继续说。" "    def _get_trajectory_class(self, data):
        valid = np.concatenate(
            [data[\"target/history/valid\"][0, -1:, 0], data[\"target/future/valid\"][0, :, 0]])
        future_xy = np.concatenate(
            [data[\"target/history/xy\"][0, -1:, :], data[\"target/future/xy\"][0, :, :]])
        future_yaw = np.concatenate(
            [data[\"target/history/yaw\"][0, -1:, 0], data[\"target/future/yaw\"][0, :, 0]])
        future_speed = np.concatenate(
            [data[\"target/history/speed\"][0, -1:, 0], data[\"target/future/speed\"][0, :, 0]])

        kMaxSpeedForStationary = 2.0                 # (m/s)
        kMaxDisplacementForStationary = 5.0          # (m)
        kMaxLateralDisplacementForStraight = 5.0     # (m)
        kMinLongitudinalDisplacementForUTurn = -5.0  # (m)
        kMaxAbsHeadingDiffForStraight = np.pi / 6.0   # (rad)
        first_valid_index, last_valid_index = 0, None
        for i in range(1, len(valid)):
            if valid[i] == 1:
                last_valid_index = i
        if valid[first_valid_index] == 0 or last_valid_index is None:
            return None

        xy_delta = future_xy[last_valid_index] - future_xy[first_valid_index]
        final_displacement = np.linalg.norm(xy_delta)
        heading_delta = future_yaw[last_valid_index] - future_yaw[first_valid_index]
        max_speed = max(future_speed[last_valid_index], future_speed[first_valid_index])

        if max_speed < kMaxSpeedForStationary and \\
                final_displacement < kMaxDisplacementForStationary:
            return \"stationary\"
        if np.abs(heading_delta) < kMaxAbsHeadingDiffForStraight:
            if np.abs(xy_delta[1]) < kMaxLateralDisplacementForStraight:
                return \"straight\"
            return \"straing_right\" if xy_delta[1] < 0 else \"straight_left\"
        if heading_delta < -kMaxAbsHeadingDiffForStraight and xy_delta[1]:
            return \"right_u_turn\" if xy_delta[0] < kMinLongitudinalDisplacementForUTurn \\
                else \"right_turn\"
        if xy_delta[0] < kMinLongitudinalDisplacementForUTurn:
            return \"left_u_turn\"
        return \"left_turn\"" "chatgpt，我在处理waymo motion数据集，能帮我解读一下这段代码吗？" "对于一个tf.io.FixedLenFeature([1], tf.string, default_value=None)的实例, 不妨令其为x, 请问x.numpy().item().decode(\"utf-8\")的结果是什么呢？" "那么如何计算the unit tangent vector at a on the original curve呢？" "chatgpt, 对于waymo motion数据集中的segment，不妨假设起点和终点分别为a和b，我想知道a的unit tanget vector at a 是什么向量呢？如何计算？" "点到直线，垂线段最短。怎么证明" "点到线段，垂线段最短，如何证明" "如何计算线段B-A上距离原点最近的点呢？" "什么是坐标系原点到向量B-A的投影？如何计算？" "请你将你所说的“某个点”改为坐标系原点重新分析。" "这里的t计算的是什么呢？" "这里的距离某个点中的“某个点”，是坐标原点吗？" "    def _compute_closest_point_of_segment(self, segments):
        # This method works only with road segments in agent-related coordinate system
        assert len(segments.shape) == 3
        assert segments.shape[1] == segments.shape[2] == 2
        A, B = segments[:, 0, :], segments[:, 1, :]
        M = B - A
        t = (-A * M).sum(axis=-1) / ((M * M).sum(axis=-1) + 1e-6)
        clipped_t = np.clip(t, 0, 1)[:, None]
        closest_points = A + clipped_t * M
        return closest_points" "hi, chatgpt, 我想请问一下这段代码的含义：" "我不理解这里kth的用法。" "np.argpartition()这个函数应该怎么用？" "我认为我和你说的是一个意思。" "假设segments是一个大小为[128,2,2]的numpy数组。128代表segment的数量, 第一个2代表起点和终点, 第二个2代表x坐标和y坐标。那么请问是不是:np.linalg.norm(segments, axis=-1)返回大小为[128, 2]，这里的2代表各segment的起点和终点。数值大小为该点到原点的欧式距离。" "np.linalg.norm(segments, axis=-1)返回大小为[128, 2]，这里的2代表各segment的起点和终点。数值大小为该点到原点的欧式距离。" "对吗？" "np.linalg.norm(segments, axis=-1)返回大小为[128, 2]，这里的2代表各segment的起点和终点。数值大小为该点到原点的欧式距离。" "应该就是先计算各segment的起点和终点到原点的距离，再计算二者的最小值吧" "因此，np.linalg.norm(segments, axis=-1)的计算结果形状为(128, 2)，而.min(axis=-1)的计算结果形状为(128,)。

------ User ------
所以这里表达的含义是segment的起点和终点到达原点的最小距离" "所以这里表达的含义是segment的起点和终点到达原点的最小距离。" "对于一个numpy数组，维度为[128,2,2]，第一维代表segment的数量，第二维代表segment的起点和终点，第三维代表x坐标和y坐标。请问np.linalg.norm(segments, axis=-1).min(axis=-1)是什么含义呢" "waymo motion 数据集中的 bbox_yaw 是如何计算的？" "scholar.google.com" "    def _transfrom_to_agent_coordinate_system(self, coordinates, shift, yaw):
        # coordinates
        # dim 0: number of agents / number of segments for road network
        # dim 1: number of history points / (start_point, end_point) for segments
        # dim 2: x, y
        yaw = -yaw
        c, s = np.cos(yaw), np.sin(yaw)
        R = np.array(((c, -s), (s, c))).reshape(2, 2)
        transformed = np.matmul((coordinates - shift), R.T)
        return transformed" "请问chatgpt，在自动驾驶场景下，agent-centric coordinates应该如何计算？" "waymo motion数据集中的roadgraph_samples/id，能否理解为它所在的polyline的id呢？" "sanity check 是什么意思？" "在waymo数据集中，有roadgraph_features中的num_points的典型值为20000, 我想知道num_points意味着什么？" "是不是因为地图过于庞大，一个时间步可能包含多个场景，这些场景发生在不同区域？" "但是奇怪的是，一个时间步的车辆状态应该是唯一的。那怎么可能包含多个场景呢？" "waymo motion数据集中，有一个字段为'roadgraph_samples/id'，官方给出的解释是 A unique string ID for the scenario represented by this example. 但是一个TFExample代表的是一个时间步，应该隶属于一个scenario。那为什么这里还有roadgraph_samples/id呢？" "所以polyline和polygon是地图处理中的术语。用这两个名词可以刻画地图。" "waymo motion数据集中的polyline和polygon是什么东西？" "在waymo motion数据集的描述中，关于'roadgraph_samples/xyz'特征，有这样的描述: The coordinate positions of the sampled map feature data points. Map polylines and polygons are sampled at 0.5 meters. 能帮我讲一下这段话吗？" "是不是在waymo motion数据集中, 一个segment所包含的scenario可能时有所重叠的。比如为了组织上的方便, 可以规定每个scenario的长度为9秒。" "在自动驾驶中, scenario和segment之间的区别是什么呢？" "比如自动驾驶汽车在采集数据。分别在高速公路和十字路口采集到了两个场景。每个场景都由连续的轨迹构成。轨迹是用不同的时间步表达的。反应在数据格式上，时间步用TFExample来表达。多个TFExample可以构成一个场景。而不同场景构成一个segment。这些都是不同的抽象层级，在实际数据中我们只有TFExample，即各个snapshot。" "是不是说segment是自动驾驶汽车在实际中采集到的数据？它在驾驶的过程中可能会遇到多种路况，采集到不同的连续时间数据。每段连续时间数据可以采样得到若干个场景，每个场景用TFRecord表示。TFRecord数据的最小单元" "是不是说segment是自动驾驶汽车在实际中采集到的数据？它在驾驶的过程中可能会遇到多种路况，采集到不同的连续时间数据。每段连续时间数据可以采样得到若干个场景，每个场景用TFRecord表示。TFRecord数据的最小单元。" "那么segment该如何理解呢？" "是不是任意时刻的snapshot即为一个TFExample, 若干个TFExample构成一段连续的轨迹。自动驾驶车辆所形式的过程中会获取多个TFExample，他们被组织在TFRecord里。" "那么在waymo motion数据集中，segment和TFRecord、TFExample之间的关系是什么？" "chatgpt, 我想请问一下，对于waymo motion数据集而言，这里所说的segment是什么？" "在传感器正常运作的情况下，如果current为valid的，那么一般来讲，该目标在past和future也为valid的。这么说对吗？" "waymo motion dataset 中的valid是什么？为什么在一个TFExample中，对于past, current 和 future都有valid这个状态呢？" "给定一个TFExample，这一帧最多有num_objects个物体。在waymo motion数据集中，最多由128个物体。能得到的信息是这些物体各自的历史状态和未来状态对吗？" "为什么在waymo motion 数据集中，每个TFExample所包含的num_steps，对于past来说是10，对于current来说是1，对于future来说是80。按照10Hz的采样率来计算，我理解waymo motion数据集的scenario长度即为9秒" "waymo motion 数据集中，每个scenario的长度是9秒吗？" "在Numpy中，如果我想生成一个大小为[128,1]，取值范围在[0,1]的整型数组，应该用什么语法？" "waymo motion dataset 中的num_objects为128，这是什么原因？" "我不理解。emacs的学习曲线是陡峭的吗？" "原来学习曲线的纵轴是学习新知识的速率呀。" "学习曲线是一个常常听到的名词。我想知道这个词所描述的是什么东西呢" "学习曲线是一个常常听到的名词。我想知道这个词所描述的是什么东西呢？" "python中使用gdb进行调试是不是一个好方法？相比于print这种调试方法怎么样？" "TensorFlow中的张量可以通过.numpy()方法转换为numpy数组吗？" "我说错了，一个TFExample是交通路况的一个snapshot，但是为什么一个场景要由多个TFExample组成呢？" "每个TFExample是交通路况的一个snapshot，这我是可以想象的。但是我不明白自动驾驶领域中所说的“场景”是什么东西？为什么一个场景要由多个scenario组成呢？" "也就是说一个scenario所包含的TFExample可能跨越了多个TFRecord文件？" "所以waymo motion数据集中一个TFRecord文件包含若干个scenario，每个scenario是由多个TFExample描述的" "在waymo motion dataset数据集中，全部数据被组织到若干TFRecord文件中。每个文件包含若干个TFExample，每个TFExample代表一帧。而每个scenario包含若干帧。依据waymo motion dataset的采样率10Hz来计算，一秒的scenario将包含10帧。即10个TFExample能够描述时长1s的scenario。" "所以TFRecord记录包含了若干TFExample proto，每个TFExample proto代表一帧。而一个scenario包含了若干帧，因此tFRecord包含了若干个场景。" "既然每个TFExample proto代表了一个帧，但是它的字段里有'state/future/x'之类的内容。" "waymo motion dataset中的每个TFExample proto代表了什么？是一个senario吗？关于这个有没有更加专业的术语？" "waymo motion dataset 中每个tfrecord proto存储的是什么信息？" "tf.Example proto 这个短语是什么意思" "dict_keys(['roadgraph_samples/dir', 'roadgraph_samples/id', 'roadgraph_samples/type', 'roadgraph_samples/valid', 'roadgraph_samples/xyz', 'state/current/bbox_yaw', 'state/current/height', 'state/current/length', 'state/current/timestamp_micros', 'state/current/valid', 'state/current/vel_yaw', 'state/current/velocity_x', 'state/current/velocity_y', 'state/current/width', 'state/current/x', 'state/current/y', 'state/current/z', 'state/future/bbox_yaw', 'state/future/height', 'state/future/length', 'state/future/timestamp_micros', 'state/future/valid', 'state/future/vel_yaw', 'state/future/velocity_x', 'state/future/velocity_y', 'state/future/width', 'state/future/x', 'state/future/y', 'state/future/z', 'state/id', 'state/is_sdc', 'state/past/bbox_yaw', 'state/past/height', 'state/past/length', 'state/past/timestamp_micros', 'state/past/valid', 'state/past/vel_yaw', 'state/past/velocity_x', 'state/past/velocity_y', 'state/past/width', 'state/past/x', 'state/past/y', 'state/past/z', 'state/tracks_to_predict', 'state/type', 'traffic_light_state/current/state', 'traffic_light_state/current/valid', 'traffic_light_state/current/x', 'traffic_light_state/current/y', 'traffic_light_state/current/z', 'traffic_light_state/past/state', 'traffic_light_state/past/valid', 'traffic_light_state/past/x', 'traffic_light_state/past/y', 'traffic_light_state/past/z']) 这个看起来太丑了，我想要每个字符串单独占据一行，请帮我重新格式化一下。" "在tensorflow中,tf.io.parse_single_example()是不是用于解析TFExample对象的？" "每一帧是一个TFExample吗？" "对于waymo数据集而言，有很多TFRecord格式的文件。我想知道每个TFRecord文件中包含的数据内容是什么呢" "对于waymo数据集而言，有很多TFRecord格式的文件。我想知道每个TFRecord文件中包含的数据内容是什么呢？" "TFRecordDatasetV2对象调用as_numpy_iterator方法后，如何查看长度" "list_files() missing 1 required positional argument: 'file_pattern'" "我如何查看TFRecordDatasetV2对象的长度，即包含了多少个TFRecord文件？" "只能说我需要保持好奇，这件事对我来说有些难以想象。" "android我理解为手机，但是手机上使用文本编辑器（不局限于Emacs），这件事想一想就没有在pc上效率高呀" "emacs-android是什么？" "ps aux 中的x是什么意义" "在shell中, ps aux | grep python 这个命令是什么含义？" "我想了解waymo数据集中所说的segment是什么东西？" "我的硬件很好了。是高性能的GPU，SSD。没想到还是这么慢。" "chatgpt，我发现用TFRecordDataset创建数据集是一个很慢的过程。我的文件列表只有一个TFRecord文件，大小在900MB左右。我是用tensorflow-gpu版本进行运算，也是很慢" "chatgpt，我发现用TFRecordDataset创建数据集是一个很慢的过程。我的文件列表只有一个TFRecord文件，大小在900MB左右。我是用tensorflow-gpu版本进行运算，也是很慢。" "TFRecordDataset的shard方法中shard_id参数是从0开始的吗？" "对图像数据进行分类时，shard划分会有什么影响吗？" "这样看不同计算节点分到的数据集数量不会有很大区别" "TFRecordDataset的shard函数会将数据集均等分成若干份吗？" "TFRecordDataset的shard函数有什么作用？" "我想问TFRecord数据集在创建时，如果指定了num_parallel_reads，作用是什么呢？" "我想问TFRecordDataset如果指定了多个TFRecord文件的路径，会怎样？" "我想问tf.data.TFRecordDataset的用法" "hi, chatgpt" "hi，chatgpt" "？" "你能发我一下GitHub上程序员做菜指南的链接吗？" "最后我在GitHub上找到了程序员做菜指南" "hi, chatgpt, 我家附近外卖商店很少。开通外卖服务的店铺早餐卖的很贵。因此我想要自己准备早餐。可以是购买或者有菜谱，这样应该至少便宜或者健康，或者两者兼得。有没有类似程序员菜谱这样的东西？" "我想知道这里的populate是什么用法？" "A valid flag for all elements of features state/future/XX. If set to 1, the element is populated with valid data, otherwise it is populated with -1." "chatgpt, 请帮我翻译一下这句话" "即使我本机是Windows，使用tramp访问服务器时，也可以使用/ssh吗？" "我的本机是Windows，想要用tramp访问Linux服务器，比如说用户名为user，IP地址为123.123.123.123，端口号为8888，想要编辑的文件夹为/home/user，应该输入怎样的命令？" "但是我只想用Emacs编辑远程文件，并使用远端服务器的Python环境。" "使用sshfs将远程文件挂载到本地后，所使用的Python环境也是本地的对吗？" "那么如果我使用sshfs将远程文件挂载到本地，使用本地Windows上的Emacs对其进行编辑，所使用的仍然是本地的" "也就是说sshfs这个工具不会自动将编辑后的文件同步到远程对吗？" "那么使用sshfs将远程Linux系统中的文件挂载到本地Windows之后，好处是我可以用本地的Emacs对其进行编辑了。请问如何将编辑后的文件同步到远程呢？" "chatgpt你好，我做深度学习开发，在本地配置好了Emacs环境。深度学习开发处理的是一个项目，有比较复杂的文件夹和很多文件。因此想要使用sshfs将远程文件挂载到本地Windows上。该怎么做？" "如何使用sshfs将远程文件系统挂载到本地？以便于我用本地的Emacs环境进行开发" "chat你好，我做深度学习开发。服务器在远端。我在本地机器上配置好了Emacs开发环境。想用本地Emacs编辑远端的文件，有没有好的办法？" "在orgmode的日程管理中，++在时间戳中代表什么含义？" "hello" "chat，在orgmode的时间戳语法中，++是什么含义？" "那++呢？" "时间戳语法中的..是什么用法" "这里的.+1d是什么意思，其中的.是什么用法" "那么我想让orgmode管理一个我每天都要做的习惯，怎么写呢？" "想知道:RESET_CHECK_BOXES: t所重置的复选框都有什么呢？可以举例吗" "既然:REPEAT_TO_STATE: TODO和:RESET_CHECK_BOX: t这么强大，为什么还有.+1d这种设置存在？" "如果设置了.+1d ，是否等价于:REPEAT_TO_STATE: TODO 和 :RESET_CHECK_BOXES: t 呢？" "可以帮我分析一下这里的语法吗：** 刷LeetCode算法题
SCHEDULED: <2023-04-09 星期日 21:00-21:30 .+7d>
:PROPERTIES:
:style:    habit
:END:" "那这里的Schedule是不是只要第一天设置了，并标记完成状态。他在重复的时候会自动+1天，无需我再去进行schedule了？" "chatgpt, 我正在用orgmode中的org-habit进行习惯管理。我想建立每日的习惯，如晚上八点刷一道LeetCode算法题，应该怎么写才能让Emacs在每天都提醒我这件事？" "s" "我先在windows上安装Symbolia字体，怎么办？" "我在使用Emacs，配合tumashu写的cnfonts这个包对字体进行管理。我想要使用Noto Color Emoji作为Emacs的emoji字体，但是cnfonts这个包默认的字符列表不包含Noto Color Emoji这个选项。应该怎么配置才能让Emacs使用上Noto Color Emoji这个字体呢？" "fontaine" "dirvish" "all-the-icons-completion" "all-the-icons-dired" "diredfl" "NS" "JS" "chatgpt, 我在使用Emacs，本机是Windows，想要使用Emacs的Tramp功能连接到远程服务器。远程服务器的用户名为user, IP地址为123.123.123.123，端口为20000，想要访问的服务器文件路径为 /home/user/.ssh/id_rsa，那么在Emacs中应该输入什么命令？" "www.youtube.com" "https://waymo.com/open/data/motion/tfexample" "www.google.com" "www.baidu.com" "https://www.manateelazycat.github.io" "https:www.google.com" "shackle" "popper" "shackle" "eshell-up" "capf-autosuggest" "eshell-syntax-highlighting" "eshell-git-prompt" "在Emacs中如何安装noto-color-emoji字体？" "请你给出一个 user@ip:[ssh_port]/path/file 的样例" "专业 Emacs 入门（七）：插件篇——编程开发类" "专业Emacs入门（五）：插件篇——功能优化类" "mind-wave" "posframe" "lsp-bridge" "cnfonts" "exec-path-from-shell" "denote" "cal-china-x" "rainbow-delimiters" "diff-hl" "which-key"))
(setq counsel-M-x-history '(#("^lsp-bridge-open-remote-file" 0 28 (ivy-index 0)) "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" #("^restart-emacs" 0 14 (ivy-index 1)) "restart-emacs" "restart-emacs" #("^eaf-open-file" 0 14 (ivy-index 0)) "eaf-open-file-manager" "restart-emacs" #("^eaf-open-terminal" 0 18 (ivy-index 0)) "eaf-open-terminal" "restart-emacs" #("^mind-wave-chat-mode" 0 20 (ivy-index 0)) "mind-wave-chat-mode" "restart-emacs" #("^eaf-open-fil" 0 13 (ivy-index 0)) "eaf-open-file-manager" "restart-emacs" "eaf-open-terminal" "restart-emacs" "restart-emacs" "restart-emacs" "restart-emacs" #("^eaf-open-browser" 0 17 (ivy-index 2)) "eaf-open-browser" "eaf-open-browser" #("^eaf-open-brow" 0 14 (ivy-index 1)) "eaf-open-browser-with-history" #("^eaf-browser" 0 12 (ivy-index 0)) "eaf-browser-restore-buffers" #("^winn" 0 5 (ivy-index 2)) "winner-undo" "eaf-open-browser" "eaf-open-browser" #("^make-directory" 0 15 (ivy-index 0)) "make-directory" "eaf-open-browser" "eaf-open-browser" "eaf-open-terminal" #("^eaf-open-music" 0 15 (ivy-index 0)) "eaf-open-music-player" #("^eaf-open" 0 9 (ivy-index 9)) "eaf-open-file-manager" "eaf-open-terminal" #("^eaf-open-git" 0 13 (ivy-index 0)) "eaf-open-git" "eaf-open-system-monitor" "eaf-open" "eaf-open" "eaf-open" "restart-emacs" "restart-emacs" "eaf-open-music-player" "restart-emacs" "eaf-open" "eaf-open-music-player" "eaf-open-music-player" "eaf-open-music-player" #("^eaf-open-musi" 0 14 (ivy-index 0)) "eaf-open-music-player" "eaf-open-music-player" "eaf-open-music-player" "restart-emacs" #("^eaf-in" 0 7 (ivy-index 0)) "eaf-install-and-update" "restart-emacs" #("^eaf-open-rss-reader" 0 20 (ivy-index 0)) "eaf-open-rss-reader" "restart-emacs" #("^eshell" 0 7 (ivy-index 10)) "eshell" "restart-emacs" #("^pass" 0 5 (ivy-index 9)) "pass" "lsp-bridge-open-remote-file" "eshell" "lsp-bridge-open-remote-file" "make-directory" "lsp-bridge-open-remote-file" "restart-emacs" "restart-emacs" "restart-emacs" "restart-emacs" #("^comment-region" 0 15 (ivy-index 0)) "comment-region" #("^uncomment-region" 0 17 (ivy-index 0)) "uncomment-region" "eshell" "eshell" "eshell" "uncomment-region" #("^cnfonts-edit-profile" 0 21 (ivy-index 0)) "cnfonts-edit-profile" "restart-emacs" "comment-region" "uncomment-region" "restart-emacs" "restart-emacs" #("^menu-bar-mode" 0 14 (ivy-index 0)) "menu-bar-mode" #("^tool-ba" 0 8 (ivy-index 0)) "tool-bar-mode" #("^tool" 0 5 (ivy-index 0)) "tool-bar-mode" #("^customize" 0 10 (ivy-index 24)) "customize" "restart-emacs" #("^restar" 0 7 (ivy-index 1)) "restart-emacs" "restart-emacs" "restart-emacs" "restart-emacs" "pass" "restart-emacs" "pass" "restart-emacs" "pass" #("^resta" 0 6 (ivy-index 1)) "restart-emacs" "restart-emacs" #("^set-bu" 0 7 (ivy-index 1)) "set-buffer-file-coding-system" #("^rever" 0 6 (ivy-index 4)) "revert-buffer-with-coding-system" #("^set-b" 0 6 (ivy-index 3)) "set-buffer-file-coding-system" "revert-buffer-with-coding-system" "revert-buffer" "set-buffer-file-coding-system" #("^rev" 0 4 (ivy-index 5)) "revert-buffer-with-coding-system" "set-buffer-file-coding-system" #("^revert-" 0 8 (ivy-index 3)) "revert-buffer-with-coding-system" "set-buffer-file-coding-system" "revert-buffer-with-coding-system" "set-buffer-file-coding-system" "revert-buffer-with-coding-system" "set-buffer-file-coding-system" #("^revert" 0 7 (ivy-index 3)) "revert-buffer-with-coding-system" "set-buffer-file-coding-system" "revert-buffer-with-coding-system" "set-buffer-file-coding-system" #("^reve" 0 5 (ivy-index 5)) "revert-buffer-with-coding-system" #("^set-buf" 0 8 (ivy-index 1)) "set-buffer-file-coding-system" "revert-buffer-with-coding-system" #("^set-buffer-file-coding-system" 0 30 (ivy-index 0)) "set-buffer-file-coding-system" "revert-buffer-with-coding-system" #("^set-buffer" 0 11 (ivy-index 1)) "set-buffer-file-coding-system" "revert-buffer-with-coding-system" "set-buffer-file-coding-system" "revert-buffer-with-coding-system" "revert-buffer" #("^revert-buffer-with-" 0 20 (ivy-index 1)) "revert-buffer-with-coding-system" "set-buffer-file-coding-system" "set-buffer-file-coding-system" #("^revert-buffer-with" 0 19 (ivy-index 1)) "revert-buffer-with-coding-system" #("^revert-buffer" 0 14 (ivy-index 3)) "revert-buffer-with-coding-system" "revert-buffer-with-coding-system" "revert-buffer-with-coding-system" "revert-buffer-with-coding-system" #("^revert-buff" 0 12 (ivy-index 3)) "revert-buffer-with-coding-system" "revert-buffer-with-coding-system" #("^set-buffer-" 0 12 (ivy-index 1)) "set-buffer-file-coding-system" "revert-buffer-with-coding-system" "revert-buffer-with-coding-system" "revert-buffer-with-coding-system" "revert-buffer-with-coding-system" "restart-emacs" #("^treemacs-create" 0 16 (ivy-index 0)) "treemacs-create-workspace" "restart-emacs" #("^all-the-icons-i" 0 16 (ivy-index 6)) "all-the-icons-install-fonts" #("^package-install" 0 16 (ivy-index 0)) "package-install" "restart-emacs" #("^all-the-icons-install" 0 22 (ivy-index 0)) "all-the-icons-install-fonts" "package-install" "restart-emacs" "package-install" #("^all-the-icons-install-fonts" 0 28 (ivy-index 0)) "all-the-icons-install-fonts" "restart-emacs" "restart-emacs" "uncomment-region" "comment-region" "cnfonts-edit-profile" "cnfonts-edit-profile" "cnfonts-edit-profile" "restart-emacs" "eshell" "cnfonts-edit-profile" #("^toggle-input-method" 0 20 (ivy-index 0)) "toggle-input-method" "toggle-input-method" "restart-emacs" "cnfonts-edit-profile" "eshell" #("^pdf-view-midnight-minor-mode" 0 29 (ivy-index 0)) "pdf-view-midnight-minor-mode" "pdf-view-midnight-minor-mode" #("^org-noter skeleton" 0 19 (ivy-index 0)) "org-noter-create-skeleton" #("^org-noter" 0 10 (ivy-index 2)) "org-noter" "restart-emacs" "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" "eaf-open-rss-reader" "restart-emacs" "restart-emacs" "restart-emacs" "restart-emacs" "uncomment-region" "restart-emacs" #("^package-list-packa" 0 19 (ivy-index 0)) "package-list-packages" #("^package-list-packages" 0 22 (ivy-index 0)) "package-list-packages" "package-install" "eaf-open-rss-reader" #("^all-the-icons-dire" 0 19 (ivy-index 0)) "all-the-icons-dired-mode" "eaf-open-rss-reader" "org-noter" "org-noter" #("^res" 0 4 (ivy-index 2)) "restart-emacs" "restart-emacs" "restart-emacs" "comment-region" "restart-emacs" "comment-region" #("^cnfonts" 0 8 (ivy-index 4)) "cnfonts-edit-profile" "restart-emacs-start-new-emacs" "eaf-open-rss-reader" "pdf-view-midnight-minor-mode" "pdf-view-midnight-minor-mode" "pdf-view-midnight-minor-mode" "pdf-view-midnight-minor-mode" "restart-emacs" "cnfonts-edit-profile" "restart-emacs" "restart-emacs" "restart-emacs" "eaf-open-rss-reader" #("^winner-undo" 0 12 (ivy-index 0)) "winner-undo" #("^org-noter-create-skeleton" 0 26 (ivy-index 0)) "org-noter-create-skeleton" "eshell" "restart-emacs" "uncomment-region" "restart-emacs" "comment-region" #("^eval-region" 0 12 (ivy-index 0)) "eval-region" "make-directory" #("^cdlatex-mode" 0 13 (ivy-index 1)) "cdlatex-mode" #("^org-noter-create" 0 17 (ivy-index 0)) "org-noter-create-skeleton" "org-noter" "org-noter" "cnfonts-edit-profile" "restart-emacs" "comment-region" "uncomment-region" "restart-emacs" "restart-emacs" "comment-region" #("^eaf-open-rss" 0 13 (ivy-index 0)) "eaf-open-rss-reader" "eshell" "eshell" "restart-emacs" "comment-region" "eshell" "restart-emacs" #("^beancount-mode" 0 15 (ivy-index 0)) "beancount-mode" "beancount-mode" "beancount-mode" "beancount-mode" "beancount-mode" "beancount-mode" "beancount-mode" "beancount-mode" "beancount-mode" "beancount-mode" "make-directory" "restart-emacs" "restart-emacs-start-new-emacs" "eshell" "eaf-open-rss-reader" "eaf-open-rss-reader" "make-directory" "eaf-open-rss-reader" "eaf-open-rss-reader" "winner-undo" "org-noter" "org-noter" "restart-emacs" #("^winner" 0 7 (ivy-index 2)) "winner-undo" "org-noter-insert-precise-note" "org-noter" "restart-emacs" "org-noter" "make-directory" "org-noter" "org-noter" "org-noter" "org-noter" "org-noter" "org-noter" #("^eaf-install-and-update" 0 23 (ivy-index 0)) "eaf-install-and-update" "eaf-open-browser" "eaf-open" "eaf-open-rss-reader" "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" "eshell" "make-directory" "winner-undo" "restart-emacs" "uncomment-region" "restart-emacs" "comment-region" "restart-emacs" "restart-emacs" #("^eaf-open-rss-" 0 14 (ivy-index 0)) "eaf-open-rss-reader" #("^customize-face" 0 15 (ivy-index 0)) "customize-face" "cnfonts-edit-profile" "restart-emacs" "cnfonts-edit-profile" "restart-emacs" "uncomment-region" "restart-emacs" "comment-region" "restart-emacs" "cnfonts-edit-profile" "restart-emacs" "cnfonts-edit-profile" "restart-emacs" "cnfonts-edit-profile" "cnfonts-edit-profile" "restart-emacs" "cnfonts-edit-profile" "cnfonts-edit-profile" "restart-emacs" "cnfonts-edit-profile" #("^cnfonts-edi" 0 12 (ivy-index 0)) "cnfonts-edit-profile" "restart-emacs" "restart-emacs" "eshell" "winner-undo" "winner-undo" "winner-undo" "restart-emacs" #("^all-the-icons-completion-mode" 0 30 (ivy-index 0)) "all-the-icons-completion-mode" #("^all-the-" 0 9 (ivy-index 4)) "all-the-icons-completion-mode" "package-list-packages" "package-install" "restart-emacs" "restart-emacs" "restart-emacs" #("^rest" 0 5 (ivy-index 1)) "restart-emacs" #("^restart-em" 0 11 (ivy-index 1)) "restart-emacs" "eaf-open-rss-reader" "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" "eaf-open-browser" "eaf-open-browser" "eaf-open-browser" "eaf-open-browser" "eaf-open-browser" "eaf-open-browser" "eshell" #("^load-theme" 0 11 (ivy-index 0)) "load-theme" "eshell" "eshell" "restart-emacs" #("^winner-redo" 0 12 (ivy-index 0)) "winner-redo" "winner-undo" "winner-undo" "eshell" "eshell" "eshell" "eshell" "restart-emacs" #("^magit" 0 6 (ivy-index 68)) "magit" "eshell" "restart-emacs" "restart-emacs" "eaf-open-rss-reader" #("^shell" 0 6 (ivy-index 6)) "shell" "toggle-input-method" "restart-emacs" "eshell" "restart-emacs-start-new-emacs" "restart-emacs" "restart-emacs" "all-the-icons-install-fonts" "eaf-open-rss-reader" "eaf-open-rss-reader" "eshell" "eshell" "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" "restart-emacs" "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" #("^lsp-bridge-open" 0 16 (ivy-index 0)) "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" "lsp-bridge-open-remote-file" "restart-emacs" "magit" "magit" "restart-emacs" "magit" #("^" 0 1 (ivy-index 0)) "magit-section-show-headings" "magit" "restart-emacs" "restart-emacs" "restart-emacs" "restart-emacs" "restart-emacs" "restart-emacs" #("^org-babel-tangle" 0 17 (ivy-index 1)) "org-babel-tangle" "restart-emacs"))
(setq file-name-history '(#("/home/mawen/.emacs.d/mind-wave/chatgpt_api_key.txt" 0 50 (ivy-index 8)) #("/home/mawen/.emacs.d/mind-wave/mind_wave.py" 0 43 (ivy-index 2)) #("/home/mawen/.emacs.d/emacs-config.org" 0 37 (ivy-index 1)) #("/home/mawen/chat/0001.chat" 0 26 (ivy-index 0)) #("/home/mawen/.zshrc" 0 18 (ivy-index 0)) #("/home/mawen/.emacs.d/mind-wave/" 0 31 (ivy-index 0)) #("/home/mawen/chat/0002.chat" 0 26 (ivy-index 0)) #("/home/mawen/chat" 0 16 (ivy-index 0)) #("/home/mawen/.emacs.d/emacs-config.html" 0 38 (ivy-index 0)) #("/home/mawen/Music/" 0 18 (ivy-index 0)) #("/home/mawen/aioWriting/notes/computer/recipe/Emacs/LaTeX/LaTeX.org" 0 66 (ivy-index 2)) #("/home/mawen/Documents/(MultiPath++) Efficient Information Fusion and Trajectory Aggregation for Behavior Prediction.pdf" 0 119 (ivy-index 4)) #("/home/mawen/Music/清白之年.flac" 0 27 (ivy-index 3)) #("/home/mawen/Music/平凡之路.mp3" 0 26 (ivy-index 2)) #("/home/mawen/.emacs.d/lsp-bridge/remote-file" 0 43 (ivy-index 0)) #("/home/mawen/org/recipe/breakfast.org" 0 36 (ivy-index 0)) #("/home/mawen/org/Beancount/txs/2023.bean" 0 39 (ivy-index 0)) #("/home/mawen/org/Beancount/accounts/Assets.bean" 0 46 (ivy-index 0)) #("/home/mawen/aioWriting/" 0 23 (ivy-index 0)) #("/home/mawen/org/" 0 16 (ivy-index 0)) #("/home/mawen/.emacs.d/emacs-rime/" 0 32 (ivy-index 0)) #("/home/mawen/Documents/MultiPath++) Efficient Information Fusion and Trajectory Aggregation for Behavior Prediction.pdf" 0 118 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/.emacs.d/" 0 40 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/.emacs.d/emacs-config.org" 0 56 (ivy-index 0)) #("d:/research/ADS/Literature/CVPR_simAgents/(MultiPath++) Efficient Information Fusion and Trajectory Aggregation for Behavior Prediction.pdf" 0 139 (ivy-index 7)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/accounts/Income.bean" 0 65 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/txs/2023.bean" 0 58 (ivy-index 0)) #("d:/research/ADS/Report/MultiPath/pages/chapter2.tex" 0 51 (ivy-index 0)) #("d:/research/ADS/Report/MultiPath/slide.tex" 0 42 (ivy-index 32)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0020.chat" 0 49 (ivy-index 0)) #("d:/research/ADS/Literature/CVPR_simAgents/MultiPath++) Efficient Information Fusion and Trajectory Aggregation for Behavior Prediction.pdf" 0 138 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0019.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0018.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0017.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0016.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/accounts/Expenses.bean" 0 67 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/main.bean" 0 54 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0015.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0014.chat" 0 49 (ivy-index 0)) #("//plink:" 0 8 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/notes/Emacs/OrgMode/KnowledgeBase.org" 0 72 (ivy-index 0)) #("d:/research/ADS/Literature/CVPR_simAgents/" 0 42 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/notes/Emacs/LaTeX" 0 52 (ivy-index 0)) #("d:/aioWriting/notes/computer/recipe/Emacs/OrgMode/OrgMode.org" 0 61 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/notes" 0 40 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/recipe/breakfast.org" 0 55 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/accounts/Assets.bean" 0 65 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/communicate.org" 0 50 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/detection.org" 0 48 (ivy-index 0)) "e:/Emacs/" #("c:/Users/xiudi/AppData/Roaming/org/honest.org" 0 45 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/README.org" 0 55 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/index.org" 0 54 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/accounts/Liabilities.bean" 0 70 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/accounts/Equity.bean" 0 65 (ivy-index 3)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/txs" 0 48 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/" 0 45 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/accounts/" 0 54 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/accounts" 0 53 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/Liabilities.bean" 0 61 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/Assets.bean" 0 56 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/Equity.bean" 0 56 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/tasks.org" 0 44 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/Expenses.bean" 0 58 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/Income.bean" 0 56 (ivy-index 0)) #("c:/Users/xiudi/Desktop/example.beancount" 0 40 (ivy-index 15)) #("e:/Emacs/" 0 9 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/.emacs.d/lisp/beancount.el" 0 57 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/.emacs.d/lisp/" 0 45 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount/note.org" 0 53 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/Beancount" 0 44 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/recipe/" 0 42 (ivy-index 0)) #("d:/research/LFRS/Literature/Masked Autoencoders Are Scalable Vision Learners.org" 0 80 (ivy-index 8)) #("d:/research/LFRS/Literature/notes" 0 33 (ivy-index 0)) #("d:/research/LFRS/Literature/foundationModel/VLP/Masked Autoencoders Are Scalable Vision Learners.pdf" 0 100 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0013.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0012.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0011.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/11.chat" 0 47 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/habits.org" 0 45 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/chat10.chat" 0 51 (ivy-index 9)) #("c:/Users/xiudi/Desktop/LeetCode.org" 0 35 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0009.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0008.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0007.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0006.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0005.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0004.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0003.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/.emacs.d/lisp/init-completion.el" 0 63 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/.emacs.d/lisp/init-dev.el" 0 56 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat" 0 39 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0002.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/0001.chat" 0 49 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/chat/chat01.chat" 0 51 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/org/" 0 35 (ivy-index 0)) #("d:/research/" 0 12 (ivy-index 0)) #("d:/research/ADS/Literature/chatgpt/chat04.chat" 0 46 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/.emacs.d/init.el" 0 47 (ivy-index 1)) #("/plink:ent@43.143.190.163#20022:/home/ent/disky/data/waymo-motion/vectorizer.py" 0 79 (ivy-index 0)) #("/ssh:ent@43.143.190.163#20022:/home/ent/disky/data/waymo-motion/vectorizer.py" 0 77 (ivy-index 0)) #("c:/plink:ent@43.143.190.163#20022/home/ent/.ssh/id_rsa" 0 54 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/.emacs.d/.gitignore" 0 50 (ivy-index 0)) #("c:/Users/xiudi/AppData/Roaming/.emacs.d/early-init.el" 0 53 (ivy-index 0)) #("d:/research/ADS/Literature/chatgpt/" 0 35 (ivy-index 0)) #("c:/Windows/Fonts/" 0 17 (ivy-index 0)) #("d:/codes/python/hello.py" 0 24 (ivy-index 0))))
(setq tablist-named-filter 'nil)
(setq projectile-project-command-history '#s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8125 data ()))
(setq mark-ring 'nil)
(setq search-ring '(#("ivy" 0 3 (isearch-regexp-function nil isearch-case-fold-search t))))
(setq regexp-search-ring '("mind-wave" "proxy" "markdown-mode" "pass" "org" "prettified" "cnfonts" "pretti" "fonts" "fira" "prettified" "cn-fonts" "字体" "simkai" "Kaiti" "字体"))
(setq extended-command-history '("restart-emacs" "uncomment-region"))
